{"title":"Mybatis常用的动态SQL元素","slug":"Mybatis常用的动态SQL元素","date":"2018-08-14T02:50:12.000Z","updated":"2018-08-14T02:55:39.845Z","comments":true,"excerpt":"","content":"<h1 id=\"Mybatis常用的动态SQL元素：\"><a href=\"#Mybatis常用的动态SQL元素：\" class=\"headerlink\" title=\"Mybatis常用的动态SQL元素：\"></a>Mybatis常用的动态SQL元素：</h1><h2 id=\"1-if\"><a href=\"#1-if\" class=\"headerlink\" title=\"1.if\"></a>1.if</h2><p>假如status 不为空，则拼接SQL”user_status = #{status}”，同理sex也是。但是在status为空、sex不为空的时候拼接的SQl为”select * from t_user where and user_sex=#{status}”，此时因为多出的”,”就会出现错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findById&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user where </span><br><span class=\"line\">    &lt;if test=&quot;status != null&quot;&gt;</span><br><span class=\"line\">        and user_status = #&#123;status&#125; </span><br><span class=\"line\">    &lt;/if&gt;</span><br><span class=\"line\">    &lt;if test=&quot;sex != null&quot;&gt;</span><br><span class=\"line\">        and user_sex = #&#123;sex&#125;</span><br><span class=\"line\">    &lt;/if&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-choose\"><a href=\"#2-choose\" class=\"headerlink\" title=\"2.choose\"></a>2.choose</h2><p>只想使用其中的某个条件语句，就可以使用choose元素，类似于Strus2中的choose标签。若status和username、pwd都不为空，则拼接”user_status = #{status}”;若都为空，则拼接”user_sex = 1”。若status为空，username、pwd不为空，此时拼接的SQL就会出现问题，多出了一个and，应当注意一下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findByChoose&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user where </span><br><span class=\"line\">    &lt;choose&gt;</span><br><span class=\"line\">        &lt;when test=&quot;status != null&quot;&gt;</span><br><span class=\"line\">            user_status = #&#123;status&#125; </span><br><span class=\"line\">        &lt;/when&gt;</span><br><span class=\"line\">        &lt;when test=&quot;username != null &amp;&amp; pwd != null&quot;&gt;</span><br><span class=\"line\">            and user_name = #&#123;username&#125; and user_pwd = #&#123;pwd&#125;</span><br><span class=\"line\">        &lt;/when&gt;</span><br><span class=\"line\">        &lt;otherwise&gt;</span><br><span class=\"line\">            user_sex = 1</span><br><span class=\"line\">        &lt;/otherwise&gt;</span><br><span class=\"line\">    &lt;/choose&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-where\"><a href=\"#3-where\" class=\"headerlink\" title=\"3.where\"></a>3.where</h2><p>where元素会判断只有if条件成立时才会插入WHERE子句，若最后的SQL为AND或者OR开头，where元素会将其去除。如本例中，stauts为空、sex不为空时，拼接的SQL为”and user_sex = #{sex}”，where元素会为SQL添加where子句，并去掉多余的and。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findByWhere&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    &lt;where&gt;</span><br><span class=\"line\">        &lt;if test=&quot;status != null&quot;&gt;</span><br><span class=\"line\">            user_status = #&#123;status&#125;</span><br><span class=\"line\">        &lt;/if&gt;</span><br><span class=\"line\">        &lt;if test=&quot;sex != null&quot;&gt;</span><br><span class=\"line\">            and user_sex = #&#123;sex&#125;</span><br><span class=\"line\">        &lt;/if&gt;</span><br><span class=\"line\">    &lt;/where&gt;        </span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-set\"><a href=\"#4-set\" class=\"headerlink\" title=\"4.set\"></a>4.set</h2><p>动态更新可以使用set元素，通过if元素动态包含需要更新的列。set元素会前置set关键字，也会去除SQL中多余的”,”。例如pwd为空、status不为空时，拼接的SQL为”user_status = #{status},”，多出的”,”会被set元素去掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=&quot;updateBySet&quot; parameterType=&quot;User&quot;&gt;</span><br><span class=\"line\">    update t_user</span><br><span class=\"line\">    &lt;set&gt;</span><br><span class=\"line\">        &lt;if test=&quot;username != null&quot;&gt;user_name = #&#123;username&#125;,&lt;/if&gt;</span><br><span class=\"line\">        &lt;if test=&quot;sex != null&quot;&gt;user_sex = #&#123;sex&#125;,&lt;/if&gt;</span><br><span class=\"line\">        &lt;if test=&quot;status != null&quot;&gt;user_status = #&#123;status&#125;,&lt;/if&gt;</span><br><span class=\"line\">        &lt;if test=&quot;pwd != null&quot;&gt;user_pwd = #&#123;pwd&#125;&lt;/if&gt;</span><br><span class=\"line\">    &lt;/set&gt;</span><br><span class=\"line\">    where user_id = #&#123;id&#125;</span><br><span class=\"line\">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-trim\"><a href=\"#5-trim\" class=\"headerlink\" title=\"5.trim\"></a>5.trim</h2><p>trim元素是一个格式化标签，可用于完成set或where元素的功能。<br>prefix：前缀，trim元素中有语句成立则在sql语句加上的前缀<br>prefixOverrides：前缀覆盖条件，多个条件以’|’分隔<br>suffix：后缀，trim元素中有语句成立，则在sql语句加上的后缀<br>suffixOverrides：后缀覆盖条件，多个条件以’|’分隔</p>\n<h3 id=\"1-模拟set\"><a href=\"#1-模拟set\" class=\"headerlink\" title=\"(1).模拟set\"></a>(1).模拟set</h3><p>若name、sex不为空，拼接的SQL为set user_name = #{name}, user_sex = #{sex}，会根据suffixOverrides属性覆盖掉多的’,’，同时添加上’set’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;update id=&quot;updateByTrim&quot; parameterType=&quot;User&quot;&gt;</span><br><span class=\"line\">    update t_user</span><br><span class=\"line\">    &lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class=\"line\">        &lt;if test=&quot;name != null&quot;&gt;user_name = #&#123;name&#125;,&lt;/if&gt;</span><br><span class=\"line\">        &lt;if test=&quot;sex != null&quot;&gt;user_sex = #&#123;sex&#125;,&lt;/if&gt;</span><br><span class=\"line\">    &lt;/trim&gt;</span><br><span class=\"line\">    where id = #&#123;id&#125;</span><br><span class=\"line\">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-模拟where\"><a href=\"#2-模拟where\" class=\"headerlink\" title=\"(2).模拟where\"></a>(2).模拟where</h3><p>若name、status不为空，拼接的SQL为：where user_name = #{name} and user_status = #{status}，会根据prefixOverrides属性覆盖掉多的’and或or’，同时添加上’where’。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findByTrim&quot; parameterType=&quot;User&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and | or&quot;&gt;</span><br><span class=\"line\">        &lt;if test=&quot;name != null&quot;&gt;</span><br><span class=\"line\">            and user_name = #&#123;name&#125;</span><br><span class=\"line\">        &lt;/if&gt;</span><br><span class=\"line\">        &lt;if test=&quot;status != null&quot;&gt;</span><br><span class=\"line\">            and user_status = #&#123;status&#125;</span><br><span class=\"line\">        &lt;/if&gt;</span><br><span class=\"line\">    &lt;/trim&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-foreach\"><a href=\"#6-foreach\" class=\"headerlink\" title=\"6.foreach\"></a>6.foreach</h2><p>构造IN条件语句时需要对集合进行遍历，这时候可以使用foreach元素。foreach会去掉多余”,”。若集合为空，则不会执行foreach元素中的操作，但此时会多出”in”关键字，报错。<br>item：集合中的元素<br>index：元素所在集合的下标，迭代map时，index是键<br>collection：集合的类型，可选值list,array，除此之外还可以是@Param(“name”)、Map中的key、类的成员变量<br>open、close：在首、尾拼接的字符<br>separator：每个元素间的分隔符<br>注：<br>foreach标签支持List、Set、Map、Array等的遍历<br>迭代数组或者List、Set集合时，index是迭代次数，item是本次迭代获取的元素；<br>迭代Map（或Map.Entry对象的集合）时，index是键，item是值<br>collection属性介绍<br>传入单参数且是List时，collection=”list”<br>传入单参数且是Array时，collection=”array”<br>传入单参数且是Set时，需使用@Param注解，同下<br>传入单参数且使用@Param(“name”)时，collection=”name”，即和@Param注解的value属性值相同，此时list、array无效<br>传入多参数且封装成Map时，如map.put(“ids”, Arrays.asList(1, 2))，此时collection=”ids”<br>传入多参数且封装成类时，如User类中有成员变量List<integer> roleIds，此时collection=”roleIds”；若User类中有成员变量Role role，Role类中有成员变量prilIds，此时collection=”role.prilIds”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例1.单参数List</span><br><span class=\"line\">// UserMapper</span><br><span class=\"line\">public List&lt;User&gt; findByForeach(List&lt;Integer&gt; ids);</span><br><span class=\"line\">// UserMapper.xml</span><br><span class=\"line\">&lt;select id=&quot;findByForeach&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    where id in</span><br><span class=\"line\">    &lt;foreach item=&quot;id&quot; index=&quot;index&quot; collection=&quot;list&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 示例2.单参数Set</span><br><span class=\"line\">// UserMapper</span><br><span class=\"line\">public List&lt;User&gt; findByForeach(@Param(&quot;ids&quot;) Set&lt;Integer&gt; ids);</span><br><span class=\"line\">// UserMapper.xml</span><br><span class=\"line\">&lt;select id=&quot;findByForeach&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    where id in</span><br><span class=\"line\">    &lt;foreach item=&quot;id&quot; index=&quot;index&quot; collection=&quot;ids&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></integer></p>\n<p>// 示例3.单参数Set<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// UserMapper</span><br><span class=\"line\">public List&lt;User&gt; findByForeach(int[] ids);</span><br><span class=\"line\">// UserMapper.xml</span><br><span class=\"line\">&lt;select id=&quot;findByForeach&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    where id in</span><br><span class=\"line\">    &lt;foreach item=&quot;id&quot; index=&quot;index&quot; collection=&quot;array&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例4.封装成Map<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... map.put(&quot;ids&quot;, Arrays.asList(1, 2)); ...</span><br><span class=\"line\">// UserMapper</span><br><span class=\"line\">public List&lt;User&gt; findByForeach(Map&lt;String, Object&gt; params);</span><br><span class=\"line\">// UserMapper.xml</span><br><span class=\"line\">&lt;select id=&quot;findByForeach&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    where id in</span><br><span class=\"line\">    &lt;foreach item=&quot;id&quot; index=&quot;index&quot; collection=&quot;ids&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<p>示例5.封装成类，支持多级’.’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">... user.setIds(Arrays.asList(1, 2)); ...</span><br><span class=\"line\">// UserMapper</span><br><span class=\"line\">public List&lt;User&gt; findByForeach(User user);</span><br><span class=\"line\">// UserMapper.xml</span><br><span class=\"line\">&lt;select id=&quot;findByForeach&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    where id in</span><br><span class=\"line\">    &lt;foreach item=&quot;id&quot; index=&quot;index&quot; collection=&quot;ids&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    &lt;/foreach&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"7-bind\"><a href=\"#7-bind\" class=\"headerlink\" title=\"7.bind\"></a>7.bind</h2><p>bind元素可以从OGNL表达式中创建一个变量并将其绑定到上下文。假如User实体中username属性为null，则会提示设置参数错误。常用于模糊查询<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;findByBind&quot; parameterType=&quot;User&quot; resultType=&quot;User&quot;&gt;</span><br><span class=\"line\">    &lt;bind name=&quot;pattern&quot; value=&quot;&apos;%&apos; + _parameter.getUsername() + &apos;%&apos;&quot;/&gt;</span><br><span class=\"line\">    select * from t_user</span><br><span class=\"line\">    where user_name like #&#123;pattern&#125;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p>\n<p>测试代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;User&gt; findByBind(User user);</span><br></pre></td></tr></table></figure></p>\n","categories":[{"name":"mybatis","path":"api/categories/mybatis.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"mybatis","path":"api/tags/mybatis.json"},{"name":"动态SQL元素","path":"api/tags/动态SQL元素.json"}]}