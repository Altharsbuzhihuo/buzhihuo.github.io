{"title":"Servlet","slug":"Servlet","date":"2018-07-19T01:56:44.000Z","updated":"2018-07-19T02:08:53.833Z","comments":true,"excerpt":"","content":"<h1 id=\"什么是Servlet？\"><a href=\"#什么是Servlet？\" class=\"headerlink\" title=\"什么是Servlet？\"></a>什么是Servlet？</h1><p>Servlet是一个Java程序，在服务器上运行以处理客户端请求并做出响应的程序。<br>Servlet主要用于处 理客户端传来的HTTP请求，并返回一个响应，它能够处理的请求有 doGet()和doPost()等方法。<br>Servlet由Servlet容器提供，所谓的Servlet容器是指提供了Servlet 功能的 服务器（本书中指Tomcat），Servlet容器将Servlet动态的加载到服务器 上。与HTTP 协议相关的Servlet使用HTTP请求和HTTP响应与客户端进行交互。因此，Servlet容器支持所有HTTP协议的请求和响应。</p>\n<h1 id=\"servlet的创建方式（三种）\"><a href=\"#servlet的创建方式（三种）\" class=\"headerlink\" title=\"servlet的创建方式（三种）\"></a>servlet的创建方式（三种）</h1><p>1.继承HttpServlet类实现一个自定义servlet[有http特性]<br>2.通过实现Servlet接口实现一个自定义servlet[什么特性都没有，所有实现要自己写]<br>3.继承GenericServlet抽象类实现一个自定义servlet[通过继承该抽象类实现类似于https特性的请求和响应]</p>\n<h1 id=\"Servlet的配置方式（两种）\"><a href=\"#Servlet的配置方式（两种）\" class=\"headerlink\" title=\"Servlet的配置方式（两种）\"></a>Servlet的配置方式（两种）</h1><p>1.基于XML的配置，在web.xml中通过servlet节点配置</p>\n<pre><code>&lt;servlet&gt;\n&lt;servlet-name&gt;secondServlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;cx.servlet.SecondServlet&lt;/servlet-class&gt;\n&lt;load-on-startup&gt;-1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n&lt;servlet-mapping&gt;\n    &lt;servlet-name&gt;secondServlet&lt;/servlet-name&gt;\n    &lt;url-pattern&gt;/hstt.php&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</code></pre><p>2.基于注解的配置（servlet3.0版本以上）</p>\n<pre><code>@WebServlet(name = &quot;SimpleServlet&quot;,urlPatterns = {&quot;/simple.jsp&quot;})\n</code></pre><h1 id=\"servlet容器：运行servlet、JSP、Filter等软件环境\"><a href=\"#servlet容器：运行servlet、JSP、Filter等软件环境\" class=\"headerlink\" title=\"servlet容器：运行servlet、JSP、Filter等软件环境\"></a>servlet容器：运行servlet、JSP、Filter等软件环境</h1><p>1.可以来创建servlet，并调用servlet的相关生命周期方法。<br>2.JSP，Filter，Listener，Tag…</p>\n<h1 id=\"servlet生命周期方法\"><a href=\"#servlet生命周期方法\" class=\"headerlink\" title=\"servlet生命周期方法\"></a>servlet生命周期方法</h1><p>1.构造器：只有第一次请求servlet时，创建servlet的实例，调用构造器（只被调用一次）。这说明servlet是单例的。<br>2.init方法：只被调用一次，在创建好实例后立即被调用，用于初始化当前servlet。<br>3.service：处理具体的请求返回响应，在具体子类中转交给了doGet方法或doPost方法。<br>4.destory：只被调用一次，在当前servlet所在的web应用被卸载前调用，用于释放当前servlet所占用资源。</p>\n<h1 id=\"load-on-startup参数\"><a href=\"#load-on-startup参数\" class=\"headerlink\" title=\"load-on-startup参数\"></a>load-on-startup参数</h1><p>1.配置在web.xml的servlet节点中或者注解配置。<br><strong>servlet节点</strong></p>\n<pre><code>&lt;servlet&gt;\n&lt;servlet-name&gt;secondServlet&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;cx.servlet.SecondServlet&lt;/servlet-class&gt;\n&lt;load-on-startup&gt;-1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n</code></pre><p><strong>注解</strong></p>\n<pre><code>@WebServlet(\n    loadOnStartup = 1,\n    urlPatterns = {&quot;/si.do&quot;,&quot;/servletTest.jsp&quot;})\n</code></pre><p>一个servlet类可用配置多个url映射，而且注解的配置和xml配置可用配置到同一个servlet类上。</p>\n<p>2.load-on-startup：可以指定servlet被创建的时机。若为负数，则在第一次请求时被创建。若为0或负数，则在当前web应用被servlet容器加载时创建实例，且数据越小越早被创建。</p>\n<h1 id=\"关于servlet-mapping\"><a href=\"#关于servlet-mapping\" class=\"headerlink\" title=\"关于servlet-mapping\"></a>关于servlet-mapping</h1><p>一个servlet可以对应多个servlet-mapping<br> <strong>虚拟路径：</strong>“<em>.扩展名”，”/</em>“  合法<br> <strong>注意：</strong>/*.action不合法</p>\n<h1 id=\"ServletConfig\"><a href=\"#ServletConfig\" class=\"headerlink\" title=\"ServletConfig\"></a>ServletConfig</h1><p>封装了servlet的配置信息，并且可以获取servletContext对象<br>1.配置servlet初始化参数</p>\n<pre><code>&lt;init-param&gt;\n        &lt;param-name&gt;user&lt;/param-name&gt;\n        &lt;param-value&gt;root&lt;/param-value&gt;\n    &lt;/init-param&gt;\n    &lt;init-param&gt;\n        &lt;param-name&gt;password&lt;/param-name&gt;\n        &lt;param-value&gt;123&lt;/param-value&gt;\n    &lt;/init-param&gt;\n</code></pre><p><strong>该节点必须在load-on-startup节点之前</strong></p>\n<p>2.获取初始化参数：<br>配置初始化参数的两种方式：<br>web.xml</p>\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;driver&lt;/param-name&gt;\n    &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre><p>注解</p>\n<pre><code>@WebServlet{\n    urlPatterns={&quot;/hello.do&quot;},\n    initParams={@WebInitParam(name = &quot;code&quot;,value = &quot;UTF-8&quot;) }\n    }\n</code></pre><blockquote>\n<p>getInitParameter(String name):获取指定参数名的初始化参数<br>getInitParameterNames():获取参数名组成的Enumeration对象</p>\n</blockquote>\n<h1 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a>ServletContext</h1><p>通过ServletContext接口读取 <strong>上下文参数</strong>（用于多个servlet间共享配置和数据）</p>\n<p>1.可以由ServletConfig获取servletContext对象  </p>\n<pre><code>ServletContext servletContext=servletConfig.getServletContext();\n</code></pre><p>2.ServletContext是当前web应用的一个大管家，可以获取到当前web应用的各方面信息。</p>\n<ul>\n<li>获取当前web应用的初始化参数</li>\n</ul>\n<h2 id=\"设置上下文参数\"><a href=\"#设置上下文参数\" class=\"headerlink\" title=\"设置上下文参数\"></a>设置上下文参数</h2><p>（context-param可以为所有Servlet所获取，而Servlet的初始化参数init-param只给那个Servlet可以获取）</p>\n<pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;driver&lt;/param-name&gt;\n    &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre><p>##获取当前web应用的某一个文件的路径<br>得到的返回结果为在服务器上的绝对路径，而不是部署前的路径</p>\n<blockquote>\n<p>getRealPath(String path)</p>\n</blockquote>\n<pre><code>ServletContext servletContext=this.getServletContext();\nString contextInit= servletContext.getInitParameter(&quot;coding&quot;);\nSystem.out.println(&quot;读取到上下文的配置参数值：&quot;+contextInit);\nservletContext.setAttribute(&quot;gkey&quot;,&quot;全局共享的数据&quot;);\nSystem.out.println(&quot;上下文的属性数据：&quot;+servletContext.getAttribute(&quot;gkey&quot;));\nString realPath=servletContext.getRealPath(&quot;WEB-INF/classes/cx.properties&quot;);\nFileInputStream in=new FileInputStream(realPath);\nProperties ppt=new Properties();\nppt.load(in);\nSystem.out.println(ppt.getProperty(&quot;Company&quot;));\nSystem.out.println(ppt.getProperty(&quot;Address&quot;));\n</code></pre><p>##获取当前web应用的名称</p>\n<blockquote>\n<p>getContextPath()</p>\n</blockquote>\n<p>##获取当前web应用的某一个文件对应的输入流</p>\n<blockquote>\n<p>getResourceAsStream(String path)  </p>\n</blockquote>\n<p> path–&gt; ‘/‘相当于当前web的根目录</p>\n<h1 id=\"Get请求和Post请求\"><a href=\"#Get请求和Post请求\" class=\"headerlink\" title=\"Get请求和Post请求\"></a>Get请求和Post请求</h1><p>1.Get请求传参在url，Get方式传送的数据量一般限制在1KB以下。<br>2.Post请求方式主要用于向web服务器端程序提交form表单中的数据，form中metho置为post。Post方式将各个表单字段及其数据作为HTTP消息实体内容发送给web服务器，传送数据量比get大得多。</p>\n<h1 id=\"如何在Servlet中获得请求信息？\"><a href=\"#如何在Servlet中获得请求信息？\" class=\"headerlink\" title=\"如何在Servlet中获得请求信息？\"></a>如何在Servlet中获得请求信息？</h1><p>1.servlet的service()方法,每次请求都会调用service方法。</p>\n<p>ServletRequest：封装了请求信息，可以从中获取任何的请求信息。<br>ServletResponse：封装了响应信息，如果想给用户什么响应，具体可以使用该接口方法实现。<br>这两个接口的实现类都是服务器予以实现的。</p>\n<h2 id=\"获得请求参数\"><a href=\"#获得请求参数\" class=\"headerlink\" title=\"获得请求参数\"></a>获得请求参数</h2><blockquote>\n<p>String user=request.getParameter(“user”)</p>\n</blockquote>\n<h1 id=\"获得当前servlet的刷新次数\"><a href=\"#获得当前servlet的刷新次数\" class=\"headerlink\" title=\"获得当前servlet的刷新次数\"></a>获得当前servlet的刷新次数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class OnlineNumberServlet extends HttpServlet &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void init()throws ServletException&#123;</span><br><span class=\"line\">        //设置初始化参数</span><br><span class=\"line\">        ServletContext servletContext=this.getServletContext();</span><br><span class=\"line\">        servletContext.setAttribute(&quot;num&quot;,1);</span><br><span class=\"line\">        System.out.println(&quot;当前servlet的访问次数：&quot;+1);</span><br><span class=\"line\">        super.init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">            doGet(request,response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class=\"line\">        //每刷新一次就将访问数量+1</span><br><span class=\"line\">        ServletContext servletContext=this.getServletContext();</span><br><span class=\"line\">        Integer val=(Integer) servletContext.getAttribute(&quot;num&quot;);</span><br><span class=\"line\">        val++;</span><br><span class=\"line\">        servletContext.setAttribute(&quot;num&quot;,val);</span><br><span class=\"line\">        System.out.println(&quot;当前本servlet访问次数：&quot;+val+&quot;&quot;);</span><br><span class=\"line\">        response.setCharacterEncoding(&quot;GBK&quot;);</span><br><span class=\"line\">        response.getWriter().println(&quot;当前本servlet访问次数：&quot;+val+&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"笔记","path":"api/categories/笔记.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"javaweb","path":"api/tags/javaweb.json"},{"name":"Servlet","path":"api/tags/Servlet.json"}]}