{"title":"字符串模式匹配算法（Java实现）","slug":"字符串模式匹配算法","date":"2018-05-31T06:58:45.000Z","updated":"2018-06-06T13:03:29.248Z","comments":true,"excerpt":"","content":"<h1 id=\"1-BF算法\"><a href=\"#1-BF算法\" class=\"headerlink\" title=\"1.BF算法\"></a>1.BF算法</h1><p>暴风(Brute Force)算法，又叫朴素算法,是一种比较好理解的简单字符串匹配算法。它是一种带回溯的模式匹配算法，将目标串依次逐字与模式串比较，再将得到的匹配结果输出。</p>\n<p><strong>代码如下：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">searchAll</span><span class=\"params\">(String str1,String str2)</span></span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len1=str1.length();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len2=str2.length();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//外层循环遍历目标字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;len1;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//内层循环遍历模式串</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;len2;j++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//逐字比较是否一致，不一致则break结束内层循环</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(str1.charAt(i+j)!=str2.charAt(j))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打印得到的匹配结果</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==len-<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"子串出现的位置为：\"</span>+i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>时间复杂度：</strong></p>\n<blockquote>\n<p>m=str1.length();<br>n=str2.length();</p>\n</blockquote>\n<blockquote>\n<p>最好的情况：O(m)<br>最坏的情况：O(n(n-m+1)m)</p>\n</blockquote>\n<h1 id=\"2-KMP算法\"><a href=\"#2-KMP算法\" class=\"headerlink\" title=\"2.KMP算法\"></a>2.KMP算法</h1><p>有点复杂，还没写，以后再写</p>\n","categories":[{"name":"数据结构","path":"api/categories/数据结构.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"数据结构","path":"api/tags/数据结构.json"},{"name":"模式匹配","path":"api/tags/模式匹配.json"},{"name":"BF算法","path":"api/tags/BF算法.json"},{"name":"KMP算法","path":"api/tags/KMP算法.json"}]}