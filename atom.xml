<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eat your own dogfood</title>
  
  <subtitle>皇家认证特级搜救犬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Altharsbuzhihuo.com/"/>
  <updated>2018-07-13T06:57:55.634Z</updated>
  <id>http://Altharsbuzhihuo.com/</id>
  
  <author>
    <name>Altharsbuzhihuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二分歸并排序（Java實現）</title>
    <link href="http://Altharsbuzhihuo.com/2018/07/13/%E4%BA%8C%E5%88%86%E6%AD%B8%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88Java%E5%AF%A6%E7%8F%BE%EF%BC%89/"/>
    <id>http://Altharsbuzhihuo.com/2018/07/13/二分歸并排序（Java實現）/</id>
    <published>2018-07-13T06:49:07.000Z</published>
    <updated>2018-07-13T06:57:55.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分歸并排序"><a href="#二分歸并排序" class="headerlink" title="二分歸并排序"></a>二分歸并排序</h1><p>  将数组从中切开分为一半，然后分区再继续划分子区间，直到分为只有两个元素比较或单个元素的无数个小区间。比较完各个分区两个元素大小之后，再将区间重新两两合并，合并过程中保持顺序由大到小排列。</p><blockquote><p>时间复杂度：O(log₂n)<br>空间复杂度：O(1)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low,mid,high,base;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arrays.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            low=<span class="number">0</span>;</span><br><span class="line">            high=i-<span class="number">1</span>;</span><br><span class="line">            base=arrays[i];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high) &#123;</span><br><span class="line">                </span><br><span class="line">                mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(arrays[mid]&gt;base) &#123;</span><br><span class="line">                    low=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(arrays[mid]&lt;base) &#123;</span><br><span class="line">                    high=mid-<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=high+<span class="number">1</span>;j--) &#123;</span><br><span class="line">                arrays[j+<span class="number">1</span>]=arrays[j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            arrays[high+<span class="number">1</span>]=base;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">        System.out.print(<span class="string">"二分归并排序结果如下："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrays.length;i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二分歸并排序&quot;&gt;&lt;a href=&quot;#二分歸并排序&quot; class=&quot;headerlink&quot; title=&quot;二分歸并排序&quot;&gt;&lt;/a&gt;二分歸并排序&lt;/h1&gt;&lt;p&gt;  将数组从中切开分为一半，然后分区再继续划分子区间，直到分为只有两个元素比较或单个元素的无数个小区间。比较
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="二分歸并排序" scheme="http://Altharsbuzhihuo.com/tags/%E4%BA%8C%E5%88%86%E6%AD%B8%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>堆排序（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/06/15/%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://Altharsbuzhihuo.com/2018/06/15/堆排序（Java实现）/</id>
    <published>2018-06-15T00:46:37.000Z</published>
    <updated>2018-07-13T06:42:34.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><p>时间复杂度：(nlogn)<br>空间复杂度：空间复杂度：O(1)</p></blockquote><p>來不及解釋了，看代碼：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重建堆（这里为最大堆）</span></span><br><span class="line"><span class="comment">     * 将数组处理为完全二叉树，使父结点&gt;左孩子&gt;右孩子</span></span><br><span class="line"><span class="comment">     * 自下而上调整二叉树结点位置，根节点为数组最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 被排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 数组长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h 非叶结点下标i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> n,<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将非叶结点下标赋给i，定义叶子结点j</span></span><br><span class="line">        <span class="keyword">int</span> i=h;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置标志位flag为false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> temp=arrays[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//查找左右孩子最大结点并交换到父结点</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;n&amp;&amp;!flag)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果左孩子小于右孩子就j++指向右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(j&lt;n-<span class="number">1</span>&amp;&amp;arrays[j]&lt;arrays[j+<span class="number">1</span>])j++;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果父结点大于右孩子，则flag=true，本次循环结束</span></span><br><span class="line">            <span class="keyword">if</span>(temp&gt;arrays[j]) &#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//否则将右孩子放入父结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                arrays[i]=arrays[j];</span><br><span class="line">                i=j;</span><br><span class="line">                j=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给子结点放入原父结点的值</span></span><br><span class="line">        arrays[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//n为数组下标最后一位</span></span><br><span class="line">        <span class="keyword">int</span> n=arrays.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        initHeap(arrays);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从小到大循环依次从堆中取出结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">            temp=arrays[<span class="number">0</span>];</span><br><span class="line">            arrays[<span class="number">0</span>]=arrays[i];</span><br><span class="line">            arrays[i]=temp;</span><br><span class="line">            </span><br><span class="line">            CreateHeap(arrays,i,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">        System.out.print(<span class="string">"堆排序结果如下："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;时间复杂度：(nlogn)&lt;br&gt;空间复杂度：空间复杂度：O(1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="堆排序" scheme="http://Altharsbuzhihuo.com/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/06/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://Altharsbuzhihuo.com/2018/06/06/快速排序（Java实现）/</id>
    <published>2018-06-06T11:40:35.000Z</published>
    <updated>2018-06-06T13:45:22.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>1.选择一个基准数x为arrays[0]，先从最右往左开始查找比x小的第一个数，找到后与arrays[i]交换位置。<br>2.再从左往右开始查找比x大的第一个数，找到后再与arrays[j]交换位置。<br>3.然后再重复1，2步骤，直到将数组中的数以x为基准分好区，此时i=j，将基准数x归位到arrays[i],左边的数都比x小，右边的数都比x大。<br>4.以x为界形成两个子区间，然后分别进行递归，也就是重复以上步骤就排好了。</p><blockquote><p>时间复杂度：平均为O(nlogn),最好为O(nlogn)，最坏为O(n2)<br>空间复杂度：O(log₂n)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arrays 被排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l 区间最左边的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r 区间最右边的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给i赋值为区间最左下标，给j赋值为区间最右下标</span></span><br><span class="line"><span class="keyword">int</span> i=l,j=r,x=arrays[i];</span><br><span class="line"><span class="comment">//以基准数x为标准，对数组的数进行分区，直到i==j，循环结束</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;j) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从右往左循环查找比基准数小的数arrays[j]，并填入arrays[i]中</span></span><br><span class="line"><span class="keyword">while</span>(arrays[j]&gt;=x&amp;&amp;i&lt;j)j--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line"></span><br><span class="line">arrays[i++]=arrays[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从左往右循环查找比基准数大的数arrays[i]，并填入arrays[j]中</span></span><br><span class="line"><span class="keyword">while</span>(arrays[i]&lt;=x&amp;&amp;i&lt;j)i++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line"></span><br><span class="line">arrays[j--]=arrays[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时i==j,将基准数x归位，使x左边的数都比x小，x右边的数都比x大</span></span><br><span class="line">arrays[i]=x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行递归，将左右分区继续排序</span></span><br><span class="line"><span class="keyword">if</span>(l&lt;i)quickSort(arrays,l,i-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;i)quickSort(arrays,i+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给quicSort传递参数，最左下标为0，最右下标为数组长度减1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 被排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"快速排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;1.选择一个基准数x为arrays[0]，先从最右往左开始查找比x小的第一个数，找到后与arrays[i]交换位置。&lt;br&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="快速排序" scheme="http://Altharsbuzhihuo.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单排序之冒泡排序、选择排序、插入排序（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/06/01/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://Altharsbuzhihuo.com/2018/06/01/简单排序之冒泡排序、选择排序、插入排序（Java实现）/</id>
    <published>2018-06-01T12:28:23.000Z</published>
    <updated>2018-06-06T13:02:02.975Z</updated>
    
    <content type="html"><![CDATA[<p>今天写了一下数据结构里三种比较基础简单的排序算法。</p><h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h1><p>升序的话就是，两两依次比较，然后把大的数往后沉下去，第一次排序结束，最后一个最大的数优先排好，然后进行第二次比较，如果数组长度为n，那么一共要进行n次比较，每一次进行n-i-1趟比较。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=arrays.length;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arrays[j]&gt;arrays[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp=arrays[j+<span class="number">1</span>];</span><br><span class="line">arrays[j+<span class="number">1</span>]=arrays[j];</span><br><span class="line">arrays[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"冒泡排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(n²)<br>空间复杂度:O(1)</p></blockquote><h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h1><p>同样也是升序，就是从数组下标0开始，依次比较，第一次比较出最小的数，和arrays[0]交换位置，然后依次类推，找出剩余最小的数，交换位置，如果数组长度为n，那么一共要进行n次比较，每一次比较n-i趟。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=arrays.length;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arrays[i]&gt;arrays[i+j]) &#123;</span><br><span class="line"></span><br><span class="line">temp=arrays[i];</span><br><span class="line">arrays[i]=arrays[i+j];</span><br><span class="line">arrays[i+j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"选择排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(n²)<br>空间复杂度:O(1)</p></blockquote><h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h1><p>升序，假定一个数组从arrays[0]开始，然后往里面依次插入数，保证每次插入的数顺序都已经排好。每当要插入arrays[j]时，从已排好序的数组的下标最后一位开始扫描，如果arrays[j]之前还有比它大的数就交换位置。如果数组长度为n，一共要比较n次，一共比较0+1+2+…+n-1次。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=arrays.length;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arrays[j-<span class="number">1</span>]&gt;arrays[j]) &#123;</span><br><span class="line"></span><br><span class="line">temp=arrays[j-<span class="number">1</span>];</span><br><span class="line">arrays[j-<span class="number">1</span>]=arrays[j];</span><br><span class="line">arrays[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"插入排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(n²)<br>空间复杂度:O(1)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天写了一下数据结构里三种比较基础简单的排序算法。&lt;/p&gt;
&lt;h1 id=&quot;1-冒泡排序&quot;&gt;&lt;a href=&quot;#1-冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;1.冒泡排序&quot;&gt;&lt;/a&gt;1.冒泡排序&lt;/h1&gt;&lt;p&gt;升序的话就是，两两依次比较，然后把大的数往
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="冒泡排序" scheme="http://Altharsbuzhihuo.com/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
      <category term="选择排序" scheme="http://Altharsbuzhihuo.com/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
      <category term="插入排序" scheme="http://Altharsbuzhihuo.com/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串模式匹配算法（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/05/31/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%EF%BC%88Java%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://Altharsbuzhihuo.com/2018/05/31/字符串模式匹配算法（Java实现）/</id>
    <published>2018-05-31T06:58:45.000Z</published>
    <updated>2018-06-06T13:03:29.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-BF算法"><a href="#1-BF算法" class="headerlink" title="1.BF算法"></a>1.BF算法</h1><p>暴风(Brute Force)算法，又叫朴素算法,是一种比较好理解的简单字符串匹配算法。它是一种带回溯的模式匹配算法，将目标串依次逐字与模式串比较，再将得到的匹配结果输出。</p><p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchAll</span><span class="params">(String str1,String str2)</span></span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len1=str1.length();</span><br><span class="line"><span class="keyword">int</span> len2=str2.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层循环遍历目标字符串</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内层循环遍历模式串</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len2;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐字比较是否一致，不一致则break结束内层循环</span></span><br><span class="line"><span class="keyword">if</span>(str1.charAt(i+j)!=str2.charAt(j))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印得到的匹配结果</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==len-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"子串出现的位置为："</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>时间复杂度：</strong></p><blockquote><p>m=str1.length();<br>n=str2.length();</p></blockquote><blockquote><p>最好的情况：O(m)<br>最坏的情况：O(n(n-m+1)m)</p></blockquote><h1 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2.KMP算法"></a>2.KMP算法</h1><p>有点复杂，还没写，以后再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-BF算法&quot;&gt;&lt;a href=&quot;#1-BF算法&quot; class=&quot;headerlink&quot; title=&quot;1.BF算法&quot;&gt;&lt;/a&gt;1.BF算法&lt;/h1&gt;&lt;p&gt;暴风(Brute Force)算法，又叫朴素算法,是一种比较好理解的简单字符串匹配算法。它是一种带回溯的模式
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="模式匹配" scheme="http://Altharsbuzhihuo.com/tags/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
      <category term="BF算法" scheme="http://Altharsbuzhihuo.com/tags/BF%E7%AE%97%E6%B3%95/"/>
    
      <category term="KMP算法" scheme="http://Altharsbuzhihuo.com/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
  </entry>
  
</feed>
