<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eat your own dogfood</title>
  
  <subtitle>皇家认证特级搜救犬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Altharsbuzhihuo.com/"/>
  <updated>2018-08-26T12:26:52.937Z</updated>
  <id>http://Altharsbuzhihuo.com/</id>
  
  <author>
    <name>Altharsbuzhihuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>B-tree和B+tree</title>
    <link href="http://Altharsbuzhihuo.com/2018/08/26/B-tree%E5%92%8CB-tree/"/>
    <id>http://Altharsbuzhihuo.com/2018/08/26/B-tree和B-tree/</id>
    <published>2018-08-26T12:12:22.000Z</published>
    <updated>2018-08-26T12:26:52.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h3><p>B-tree( Balance tree )，也就是平衡树。 相对于二叉树而言，B-tree每个节点有多个分支，即多叉，所以又叫多路搜索树。这个数据结构一般用于数据库的索引，查找效率比较高。</p><p>B-tree结构的数据首先包含一个二元组[key,data]，key为记录的键值，对应表中的主键值，data为除主键外的数据；每个非终端节点（即非根节点和叶子节点）包含指向子树根节点的指针Pi ( i=1，2，3…n )。</p><p>m阶B-Tree满足以下条件：</p><p>1、每个节点最多拥有m个子树</p><p>2、根节点至少有2个子树</p><p>3、分支节点至少拥有m/2颗子树（除根节点和叶子节点外都是分支节点）</p><p>4、所有叶子节点都在同一层、每个节点最多可以有m-1个key，并且以升序排列</p><p><img src="\img\20160202204827368.png" alt="B-tree"></p><h3 id="B-tree-1"><a href="#B-tree-1" class="headerlink" title="B+tree"></a>B+tree</h3><p>与B-tree结构类似，B+tree是在B-tree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就使用了B+tree算法处理索引结构。</p><p>B-tree的每个节点不仅包含数据的key值，还有data值。而每个节点的存储空间有限，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储数据量很大时会导致B-tree的深度较大，影响查询效率。</p><p>在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。 </p><p>B+tree相对于B-tree的不同：</p><ol><li>非叶子节点只存储键值信息。</li><li>所有叶子节点之间都有一个链指针。</li><li>数据记录都存放在叶子节点中。</li></ol><p><img src="\img\20160202205105560.png" alt="B+tree"></p><p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：一种是对于主键的范围查找和分页查找，另一种是从根节点开始，进行随机查找。 </p><p>数据库中的B+Tree索引可以分为聚集索引（clustered index）和辅助索引（secondary index）。上面的B+Tree在数据库中的实现即为聚集索引，聚集索引的B+Tree中的叶子节点存放的是整张表的行记录数据。辅助索引与聚集索引的区别在于辅助索引的叶子节点并不包含行记录的全部数据，而是存储相应行数据的聚集索引键，即主键。当通过辅助索引来查询数据时，InnoDB存储引擎会遍历辅助索引找到主键，然后再通过主键在聚集索引中找到完整的行记录数据。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;B-tree&quot;&gt;&lt;a href=&quot;#B-tree&quot; class=&quot;headerlink&quot; title=&quot;B-tree&quot;&gt;&lt;/a&gt;B-tree&lt;/h3&gt;&lt;p&gt;B-tree( Balance tree )，也就是平衡树。 相对于二叉树而言，B-tree每个节点有多个分
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://Altharsbuzhihuo.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>MySQL乐观锁悲观锁</title>
    <link href="http://Altharsbuzhihuo.com/2018/08/19/MySQL%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>http://Altharsbuzhihuo.com/2018/08/19/MySQL乐观锁悲观锁/</id>
    <published>2018-08-19T11:45:52.000Z</published>
    <updated>2018-08-19T11:51:47.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL乐观锁悲观锁"><a href="#MySQL乐观锁悲观锁" class="headerlink" title="MySQL乐观锁悲观锁"></a>MySQL乐观锁悲观锁</h1><h3 id="一、并发控制"><a href="#一、并发控制" class="headerlink" title="一、并发控制"></a>一、并发控制</h3><p>​       同一时刻可能会有多个用户更新同一张表的同一条记录。这就会产生冲突，这就是<a href="http://blog.csdn.net/qq_26545305/article/details/52577621" target="_blank" rel="noopener">并发性问题</a>。数据库的并发操作通常会导致、丢失更新、读脏数据、不可重复读等问题。</p><h3 id="二、悲观锁和乐观锁"><a href="#二、悲观锁和乐观锁" class="headerlink" title="二、悲观锁和乐观锁"></a>二、悲观锁和乐观锁</h3><p>​       乐观锁顾名思义就是非常乐观啦，它认为所有的操作都不会产生并发冲突。与之相对应的就是悲观锁。它呢比较悲观，认为所有的操作都会产生并发冲突。</p><p>​       其实呢，乐观锁和悲观锁在代码层（java）、缓存层（redis）、数据库层（mysql）都有自己的实现。今天呢，我们就谈一谈在数据库层的实现。</p><p>​       乐观锁呢，其实并没有锁，只是这么一种叫法而已。大多是基于数据版本（Version）记录机制实现。悲观锁大多数情况下依赖数据库自身锁机制实现，以保证操作最大程度的独占性。加锁当然伴随着的就是资源的消耗了，比如获得获得锁，释放锁等。<strong>乐观锁加版本号，悲观锁关闭自动提交。</strong></p><h3 id="三、乐观锁实现"><a href="#三、乐观锁实现" class="headerlink" title="三、乐观锁实现"></a>三、乐观锁实现</h3><p>​       一般是先给表加一个版本号（version）字段。当读取数据时，将version字段的值一同读出。每操作（更新）一次，将那条记录的version加1。当我们提交更新的时候，判断此刻的version值是否与刚刚查询出来的version值相等。如果相等，则说明这段期间，没有其他程序对其进行操作（更新）。则予以更新，将version字段的值加1；否则认为是过期数据，拒绝更新。</p><p>​      ①数据表设计  task  有三个字段，分别是id、value、version</p><p>​      ②每次更新task表中的value字段，为了防止发生冲突，需要这样操作。</p><p>​      update task set value=newValue,version=versionValue+1  where id=1 and version=versionValue ;</p><p>​      只有这条语句执行了，才表明本次更新value字段的值成功</p><p>​       假如有两个节点A和B都要更新task表中的value字段，在同一时刻，A节点和B节点从task表中读到的version值为2，那么A节点和B节点在更新value字段值的时候，都执行update task set value=newValue，version=3 where id=1 and version=2；实际上只有1个节点执行该SQL语句成功，假设A节点执行成功，那么此刻task表的version字段的值是3，B节点在执行 update task set value=newValue，version=3 where id=1 and version=2 这条SQL语句是不执行的。这样就保证了更新task表时不发生冲突。</p><h3 id="四、悲观锁实现"><a href="#四、悲观锁实现" class="headerlink" title="四、悲观锁实现"></a>四、悲观锁实现</h3><p>​       要使用悲观锁，需要关闭mysql数据库的自动提交属性，因为mysql默认使用autocommit模式，也就是说，当你执行一个更新操作后，mysql会立即将结果进行提交。</p><p>​        使用命令设置mysql 为非autocommit模式：set autocommit =0；</p><p>​       一般使用select … for update<strong>对所选择的数据进行加锁处理</strong>，例如，select status form t_goods where id in (‘1’,’2’)  for update;这条sql语句会锁定t_goods表中id为1和id为2的记录。</p><p>​       使用场景举例：商品t_goods表有一个字段status，status为1代表商品未被下单，status为2代表商品已经被下单，那么我们队某个商品下单是必须确保该商品status为1.假设商品的id为1</p><p>​       ①begin/begin work/start transaction；//开始事务</p><p>​       ②select status from t_goods where id=1 <strong>for update</strong>；//查询出商品信息</p><p>​       ③insert into t_orders(id,goods_id) value (null,1);//根据商品信息生成订单</p><p>​       ④update t_goods set status=2;//修改商品status为2</p><p>​       ⑤commit/commit work;//提交事务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL乐观锁悲观锁&quot;&gt;&lt;a href=&quot;#MySQL乐观锁悲观锁&quot; class=&quot;headerlink&quot; title=&quot;MySQL乐观锁悲观锁&quot;&gt;&lt;/a&gt;MySQL乐观锁悲观锁&lt;/h1&gt;&lt;h3 id=&quot;一、并发控制&quot;&gt;&lt;a href=&quot;#一、并发控制&quot; cla
      
    
    </summary>
    
      <category term="数据库" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="数据库" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis常用的动态SQL元素</title>
    <link href="http://Altharsbuzhihuo.com/2018/08/14/Mybatis%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8A%A8%E6%80%81SQL%E5%85%83%E7%B4%A0/"/>
    <id>http://Altharsbuzhihuo.com/2018/08/14/Mybatis常用的动态SQL元素/</id>
    <published>2018-08-14T02:50:12.000Z</published>
    <updated>2018-08-19T11:56:36.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis常用的动态SQL元素："><a href="#Mybatis常用的动态SQL元素：" class="headerlink" title="Mybatis常用的动态SQL元素："></a>Mybatis常用的动态SQL元素：</h1><h2 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h2><p>假如status 不为空，则拼接SQL”user_status = #{status}”，同理sex也是。但是在status为空、sex不为空的时候拼接的SQl为”select * from t_user where and user_sex=#{status}”，此时因为多出的”,”就会出现错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findById&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">    select * from t_user where </span><br><span class="line">    &lt;if test=&quot;status != null&quot;&gt;</span><br><span class="line">        and user_status = #&#123;status&#125; </span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;sex != null&quot;&gt;</span><br><span class="line">        and user_sex = #&#123;sex&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="2-choose"><a href="#2-choose" class="headerlink" title="2.choose"></a>2.choose</h2><p>只想使用其中的某个条件语句，就可以使用choose元素，类似于Strus2中的choose标签。若status和username、pwd都不为空，则拼接”user_status = #{status}”;若都为空，则拼接”user_sex = 1”。若status为空，username、pwd不为空，此时拼接的SQL就会出现问题，多出了一个and，应当注意一下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByChoose&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">    select * from t_user where </span><br><span class="line">    &lt;choose&gt;</span><br><span class="line">        &lt;when test=&quot;status != null&quot;&gt;</span><br><span class="line">            user_status = #&#123;status&#125; </span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=&quot;username != null &amp;&amp; pwd != null&quot;&gt;</span><br><span class="line">            and user_name = #&#123;username&#125; and user_pwd = #&#123;pwd&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;otherwise&gt;</span><br><span class="line">            user_sex = 1</span><br><span class="line">        &lt;/otherwise&gt;</span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-where"><a href="#3-where" class="headerlink" title="3.where"></a>3.where</h2><p>where元素会判断只有if条件成立时才会插入WHERE子句，若最后的SQL为AND或者OR开头，where元素会将其去除。如本例中，stauts为空、sex不为空时，拼接的SQL为”and user_sex = #{sex}”，where元素会为SQL添加where子句，并去掉多余的and。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByWhere&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;status != null&quot;&gt;</span><br><span class="line">            user_status = #&#123;status&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;sex != null&quot;&gt;</span><br><span class="line">            and user_sex = #&#123;sex&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;        </span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="4-set"><a href="#4-set" class="headerlink" title="4.set"></a>4.set</h2><p>动态更新可以使用set元素，通过if元素动态包含需要更新的列。set元素会前置set关键字，也会去除SQL中多余的”,”。例如pwd为空、status不为空时，拼接的SQL为”user_status = #{status},”，多出的”,”会被set元素去掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateBySet&quot; parameterType=&quot;User&quot;&gt;</span><br><span class="line">    update t_user</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;if test=&quot;username != null&quot;&gt;user_name = #&#123;username&#125;,&lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;sex != null&quot;&gt;user_sex = #&#123;sex&#125;,&lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;status != null&quot;&gt;user_status = #&#123;status&#125;,&lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;pwd != null&quot;&gt;user_pwd = #&#123;pwd&#125;&lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    where user_id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-trim"><a href="#5-trim" class="headerlink" title="5.trim"></a>5.trim</h2><p>trim元素是一个格式化标签，可用于完成set或where元素的功能。<br>prefix：前缀，trim元素中有语句成立则在sql语句加上的前缀<br>prefixOverrides：前缀覆盖条件，多个条件以’|’分隔<br>suffix：后缀，trim元素中有语句成立，则在sql语句加上的后缀<br>suffixOverrides：后缀覆盖条件，多个条件以’|’分隔</p><h3 id="1-模拟set"><a href="#1-模拟set" class="headerlink" title="(1).模拟set"></a>(1).模拟set</h3><p>若name、sex不为空，拼接的SQL为set user_name = #{name}, user_sex = #{sex}，会根据suffixOverrides属性覆盖掉多的’,’，同时添加上’set’<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">"updateByTrim"</span> parameterType=<span class="string">"User"</span>&gt;</span><br><span class="line">    update t_user</span><br><span class="line">    &lt;trim prefix=<span class="string">"set"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">        &lt;if test="name != null"&gt;user_name = #&#123;name&#125;,&lt;/if&gt;</span><br><span class="line">        &lt;if test="sex != null"&gt;user_sex = #&#123;sex&#125;,&lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-模拟where"><a href="#2-模拟where" class="headerlink" title="(2).模拟where"></a>(2).模拟where</h3><p>若name、status不为空，拼接的SQL为：where user_name = #{name} and user_status = #{status}，会根据prefixOverrides属性覆盖掉多的’and或or’，同时添加上’where’。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findByTrim&quot; parameterType=&quot;User&quot; resultMap=&quot;userMap&quot;&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and | or&quot;&gt;</span><br><span class="line">        &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="line">            and user_name = #&#123;name&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;status != null&quot;&gt;</span><br><span class="line">            and user_status = #&#123;status&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="6-foreach"><a href="#6-foreach" class="headerlink" title="6.foreach"></a>6.foreach</h2><p>构造IN条件语句时需要对集合进行遍历，这时候可以使用foreach元素。foreach会去掉多余”,”。若集合为空，则不会执行foreach元素中的操作，但此时会多出”in”关键字，报错。<br>item：集合中的元素<br>index：元素所在集合的下标，迭代map时，index是键<br>collection：集合的类型，可选值list,array，除此之外还可以是@Param(“name”)、Map中的key、类的成员变量<br>open、close：在首、尾拼接的字符<br>separator：每个元素间的分隔符<br>注：<br>foreach标签支持List、Set、Map、Array等的遍历<br>迭代数组或者List、Set集合时，index是迭代次数，item是本次迭代获取的元素；<br>迭代Map（或Map.Entry对象的集合）时，index是键，item是值<br>collection属性介绍<br>传入单参数且是List时，collection=”list”<br>传入单参数且是Array时，collection=”array”<br>传入单参数且是Set时，需使用@Param注解，同下<br>传入单参数且使用@Param(“name”)时，collection=”name”，即和@Param注解的value属性值相同，此时list、array无效<br>传入多参数且封装成Map时，如map.put(“ids”, Arrays.asList(1, 2))，此时collection=”ids”<br>传入多参数且封装成类时，如User类中有成员变量List<integer> roleIds，此时collection=”roleIds”；若User类中有成员变量Role role，Role类中有成员变量prilIds，此时collection=”role.prilIds”<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例1.单参数List</span></span><br><span class="line"><span class="comment">// UserMapper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line"><span class="comment">// UserMapper.xml</span></span><br><span class="line">&lt;select id=<span class="string">"findByForeach"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach item=<span class="string">"id"</span> index=<span class="string">"index"</span> collection=<span class="string">"list"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 示例2.单参数Set</span></span><br><span class="line"><span class="comment">// UserMapper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(@Param(<span class="string">"ids"</span>)</span> Set&lt;Integer&gt; ids)</span>;</span><br><span class="line"><span class="comment">// UserMapper.xml</span></span><br><span class="line">&lt;select id=<span class="string">"findByForeach"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach item=<span class="string">"id"</span> index=<span class="string">"index"</span> collection=<span class="string">"ids"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></integer></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例3.单参数Set</span></span><br><span class="line"><span class="comment">// UserMapper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(<span class="keyword">int</span>[] ids)</span></span>;</span><br><span class="line"><span class="comment">// UserMapper.xml</span></span><br><span class="line">&lt;select id=<span class="string">"findByForeach"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach item=<span class="string">"id"</span> index=<span class="string">"index"</span> collection=<span class="string">"array"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>示例4.封装成Map<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">... map.put(<span class="string">"ids"</span>, Arrays.asList(<span class="number">1</span>, <span class="number">2</span>)); ...</span><br><span class="line"><span class="comment">// UserMapper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line"><span class="comment">// UserMapper.xml</span></span><br><span class="line">&lt;select id=<span class="string">"findByForeach"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach item=<span class="string">"id"</span> index=<span class="string">"index"</span> collection=<span class="string">"ids"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>示例5.封装成类，支持多级’.’<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">... user.setIds(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>)); ...</span><br><span class="line"><span class="comment">// UserMapper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByForeach</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="comment">// UserMapper.xml</span></span><br><span class="line">&lt;select id=<span class="string">"findByForeach"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    where id in</span><br><span class="line">    &lt;foreach item=<span class="string">"id"</span> index=<span class="string">"index"</span> collection=<span class="string">"ids"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><h2 id="7-bind"><a href="#7-bind" class="headerlink" title="7.bind"></a>7.bind</h2><p>bind元素可以从OGNL表达式中创建一个变量并将其绑定到上下文。假如User实体中username属性为null，则会提示设置参数错误。常用于模糊查询<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"findByBind"</span> parameterType=<span class="string">"User"</span> resultType=<span class="string">"User"</span>&gt;</span><br><span class="line">    &lt;bind name=<span class="string">"pattern"</span> value=<span class="string">"'%' + _parameter.getUsername() + '%'"</span>/&gt;</span><br><span class="line">    select * from t_user</span><br><span class="line">    where user_name like #&#123;pattern&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByBind</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis常用的动态SQL元素：&quot;&gt;&lt;a href=&quot;#Mybatis常用的动态SQL元素：&quot; class=&quot;headerlink&quot; title=&quot;Mybatis常用的动态SQL元素：&quot;&gt;&lt;/a&gt;Mybatis常用的动态SQL元素：&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
      <category term="mybatis" scheme="http://Altharsbuzhihuo.com/categories/mybatis/"/>
    
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="mybatis" scheme="http://Altharsbuzhihuo.com/tags/mybatis/"/>
    
      <category term="动态SQL元素" scheme="http://Altharsbuzhihuo.com/tags/%E5%8A%A8%E6%80%81SQL%E5%85%83%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>js代码密码强度校验</title>
    <link href="http://Altharsbuzhihuo.com/2018/08/08/js%E4%BB%A3%E7%A0%81%E5%AF%86%E7%A0%81%E5%BC%BA%E5%BA%A6%E6%A0%A1%E9%AA%8C/"/>
    <id>http://Altharsbuzhihuo.com/2018/08/08/js代码密码强度校验/</id>
    <published>2018-08-08T11:49:38.000Z</published>
    <updated>2018-08-19T11:57:24.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单里的代码"><a href="#表单里的代码" class="headerlink" title="表单里的代码"></a>表单里的代码</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dt size="1" width="40%" align="right"&gt;密码强度:&lt;/dt&gt;</span><br><span class="line">            &lt;dd&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;span size="1" width="20%" id="strength_L" bgcolor="#eeeeee"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">                &lt;span size="1" width="20%" id="strength_M" bgcolor="#eeeeee"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">                &lt;span size="1" width="20%" id="strength_H" bgcolor="#eeeeee"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;</span><br><span class="line">            &lt;/dd&gt;</span><br></pre></td></tr></table></figure><h1 id="js里的代码"><a href="#js里的代码" class="headerlink" title="js里的代码"></a>js里的代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span>(<span class="params">pwdval</span>) </span>&#123;</span><br><span class="line">       $(<span class="string">"#pwdTip"</span>).html(<span class="string">""</span>);</span><br><span class="line">       <span class="keyword">if</span>(pwdval==<span class="string">""</span>)&#123;</span><br><span class="line">           $(<span class="string">"#pwdTip"</span>).html(<span class="string">"&lt;font color=red&gt;密码不能为空！&lt;/font&gt;"</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pwdval.length&lt;<span class="number">5</span>)&#123;</span><br><span class="line">           $(<span class="string">"#pwdTip"</span>).html(<span class="string">"&lt;font color=red&gt;密码不能少于6位！&lt;/font&gt;"</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $(<span class="string">"#pwd2Tip"</span>).html(<span class="string">"&lt;font color=green&gt;✔&lt;/font&gt;"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//密码强度校验</span></span><br><span class="line">       <span class="comment">//显示颜色</span></span><br><span class="line">       Dfault_color=<span class="string">"#eeeeee"</span>;     <span class="comment">//默认颜色</span></span><br><span class="line">       L_color=<span class="string">"#FF0000"</span>;      <span class="comment">//低强度的颜色，且只显示在最左边的单元格中</span></span><br><span class="line">       M_color=<span class="string">"#FF9900"</span>;      <span class="comment">//中等强度的颜色，且只显示在左边两个单元格中</span></span><br><span class="line">       H_color=<span class="string">"#33CC00"</span>;      <span class="comment">//高强度的颜色，三个单元格都显示</span></span><br><span class="line">       <span class="keyword">if</span> (pwdval == <span class="literal">null</span>|| pwdval==<span class="string">''</span>)&#123;</span><br><span class="line">           Lcolor=Mcolor=Hcolor=Dfault_color;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">           S_level=checkStrong(pwdval);</span><br><span class="line">           <span class="keyword">switch</span>(S_level) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                   Lcolor = Mcolor = Hcolor = Dfault_color;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   Lcolor = L_color;</span><br><span class="line">                   Mcolor = Hcolor = Dfault_color;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                   Lcolor=Mcolor=M_color;</span><br><span class="line">                   Hcolor = Dfault_color;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   Lcolor = Mcolor = Hcolor = H_color;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">document</span>.getElementById(<span class="string">"strength_L"</span>).style.background = Lcolor;</span><br><span class="line">       <span class="built_in">document</span>.getElementById(<span class="string">"strength_M"</span>).style.background = Mcolor;</span><br><span class="line">       <span class="built_in">document</span>.getElementById(<span class="string">"strength_H"</span>).style.background = Hcolor;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//判断输入密码的类型</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">CharMode</span>(<span class="params">iN</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (iN &gt;= <span class="number">48</span> &amp;&amp; iN &lt;= <span class="number">57</span>) <span class="comment">//数字</span></span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (iN &gt;= <span class="number">65</span> &amp;&amp; iN &lt;= <span class="number">90</span>) <span class="comment">//大写</span></span><br><span class="line">           <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">if</span> (iN &gt;= <span class="number">97</span> &amp;&amp; iN &lt;= <span class="number">122</span>) <span class="comment">//小写</span></span><br><span class="line">           <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//bitTotal函数</span></span><br><span class="line">   <span class="comment">//计算密码模式</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">bitTotal</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">       modes = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (num &amp; <span class="number">1</span>)</span><br><span class="line">               modes++;</span><br><span class="line">           num &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> modes;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//返回强度级别</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkStrong</span>(<span class="params">sPW</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (sPW.length &lt; <span class="number">6</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;           <span class="comment">//密码太短，不检测级别</span></span><br><span class="line">       Modes = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sPW.length; i++)&#123;</span><br><span class="line">           <span class="comment">//密码模式</span></span><br><span class="line">           Modes |= CharMode(sPW.charCodeAt(i));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> bitTotal(Modes);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/img/20180808200109.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;表单里的代码&quot;&gt;&lt;a href=&quot;#表单里的代码&quot; class=&quot;headerlink&quot; title=&quot;表单里的代码&quot;&gt;&lt;/a&gt;表单里的代码&lt;/h1&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="js" scheme="http://Altharsbuzhihuo.com/categories/js/"/>
    
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="js" scheme="http://Altharsbuzhihuo.com/tags/js/"/>
    
      <category term="密码强度校验" scheme="http://Altharsbuzhihuo.com/tags/%E5%AF%86%E7%A0%81%E5%BC%BA%E5%BA%A6%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Java学习路线</title>
    <link href="http://Altharsbuzhihuo.com/2018/08/05/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://Altharsbuzhihuo.com/2018/08/05/Java学习路线/</id>
    <published>2018-08-05T12:23:48.000Z</published>
    <updated>2018-08-05T12:30:25.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h1><h2 id="1、java基本语法"><a href="#1、java基本语法" class="headerlink" title="1、java基本语法"></a>1、java基本语法</h2><p>（1 编写 HelloWorld、2 常量、3 变量、4 数据类型、5 运算符、6 方法、7 流程控制语句、8 IDEA使用：目前企业使用最多开发工具、9 数组）</p><h2 id="2、面向对象"><a href="#2、面向对象" class="headerlink" title="2、面向对象"></a>2、面向对象</h2><p>（1 类、2 对象、3 封装、继承、多态、4 构造器、5super、this、6 接口、抽象类、7 权限修饰符、8 内部类、9 Random、ArrayList、String、Arrays、Math）</p><h2 id="3、API"><a href="#3、API" class="headerlink" title="3、API"></a>3、API</h2><p>（常用API:1 Date、2 DateFormat、3 Calendar、4 System、5 StringBuilde）</p><h2 id="4、集合"><a href="#4、集合" class="headerlink" title="4、集合"></a>4、集合</h2><p>（1 Collection、2 泛型、3 List、4 Set、5 Collections、6 Map、7 HashMap）</p><h2 id="5、异常"><a href="#5、异常" class="headerlink" title="5、异常"></a>5、异常</h2><p>（1 异常体系、2 异常分类、3 声明抛出捕获异常、4 自定义异常）</p><h2 id="6、多线程"><a href="#6、多线程" class="headerlink" title="6、多线程"></a>6、多线程</h2><p>（1 线程概念、2 线程同步、3 Lock、4 线程生命周期、5 线程池）</p><h2 id="7、Lambda表达式"><a href="#7、Lambda表达式" class="headerlink" title="7、Lambda表达式"></a>7、Lambda表达式</h2><p>（1 函数式思想概述、2 Lambda标准格式、3 Lambda语法与注意事项）</p><h2 id="8、IO流"><a href="#8、IO流" class="headerlink" title="8、IO流"></a>8、IO流</h2><p>（1 文件、2 字节流、字符流、3 转换流、高效流）</p><h2 id="9、网络编程"><a href="#9、网络编程" class="headerlink" title="9、网络编程"></a>9、网络编程</h2><p>（1 网络编程三要素、2 Socket原理机制、3 UDP传输、4 TCP传输）</p><h2 id="10、数据库"><a href="#10、数据库" class="headerlink" title="10、数据库"></a>10、数据库</h2><p>（1 mysql、2 jdbc、3 连接池、4 JdbcTemplate ）</p><h2 id="11、前端技术"><a href="#11、前端技术" class="headerlink" title="11、前端技术"></a>11、前端技术</h2><p>（1 html5、2 css、3 javascript、4 bootstrap）</p><h2 id="12、linux"><a href="#12、linux" class="headerlink" title="12、linux"></a>12、linux</h2><p>（1 linux安装、2 目录操作、3 文件操作、4 网络操作等）</p><h2 id="13、nginx"><a href="#13、nginx" class="headerlink" title="13、nginx"></a>13、nginx</h2><p>（ nginx安装、配置、部署）</p><h2 id="14、xml"><a href="#14、xml" class="headerlink" title="14、xml"></a>14、xml</h2><p>（1 xml基本语法、2 约束）</p><h2 id="15、jsonp"><a href="#15、jsonp" class="headerlink" title="15、jsonp"></a>15、jsonp</h2><p>（ 1 jsoup概述、2 jsoup作用使用、3 xpath）</p><h2 id="16、Servlet"><a href="#16、Servlet" class="headerlink" title="16、Servlet"></a>16、Servlet</h2><p>（1 tomcat、2 request、response、3 cookie、session、4 jsp、el、jstl、Filter）</p><h2 id="17、web异步开发"><a href="#17、web异步开发" class="headerlink" title="17、web异步开发"></a>17、web异步开发</h2><p>（1 jquery3、2 ajax、3 json）</p><h2 id="18、redis"><a href="#18、redis" class="headerlink" title="18、redis"></a>18、redis</h2><p>（1 nosql介绍、2 redis数据类型、3 常用命令、4 jedis）</p><h2 id="19、maven"><a href="#19、maven" class="headerlink" title="19、maven"></a>19、maven</h2><p>（1 maven概念与作用、2 idea集成maven、3 maven常用命令、4 依赖管理）</p><h2 id="20、spring"><a href="#20、spring" class="headerlink" title="20、spring"></a>20、spring</h2><p>（1 spring体系结构、2 spring配置、3 bean管理、 4 IOC/DI、AOP、5 事务管理、6 spring5新特性 ）</p><h2 id="21、spring-mvc"><a href="#21、spring-mvc" class="headerlink" title="21、spring mvc"></a>21、spring mvc</h2><p>（1 springmvc概述、2 控制器、3 常用注解、4 参数绑定、5 json数据交换、6 resutful、7 拦截器、8 文件上传、9 异常处理）</p><h2 id="22、mybatis"><a href="#22、mybatis" class="headerlink" title="22、mybatis"></a>22、mybatis</h2><p>（1 自定义mybatis框架、2 mybatis入门、3 架构分析、4 常用API、5 配置与事务管理、6 mapper代理、7 数据封装、8 动态sql、9 关联查询、10 性能优化、11 查询缓存、12 SSM整合）</p><h2 id="23、拓展"><a href="#23、拓展" class="headerlink" title="23、拓展"></a>23、拓展</h2><p>（1 Oracle、2 springboot、3、spring data jpa、4 springcloud、5 vue.js 、6 分布式服务、7 中间件 、8 高并发 、9 微服务技术 等等）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java学习路线&quot;&gt;&lt;a href=&quot;#Java学习路线&quot; class=&quot;headerlink&quot; title=&quot;Java学习路线&quot;&gt;&lt;/a&gt;Java学习路线&lt;/h1&gt;&lt;h2 id=&quot;1、java基本语法&quot;&gt;&lt;a href=&quot;#1、java基本语法&quot; class=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="学习路线" scheme="http://Altharsbuzhihuo.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://Altharsbuzhihuo.com/2018/08/03/JDBC/"/>
    <id>http://Altharsbuzhihuo.com/2018/08/03/JDBC/</id>
    <published>2018-08-03T03:05:54.000Z</published>
    <updated>2018-08-19T12:01:38.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC-Java-DataBase-Connection-程序的创建步骤："><a href="#JDBC-Java-DataBase-Connection-程序的创建步骤：" class="headerlink" title="JDBC(Java DataBase Connection)程序的创建步骤："></a>JDBC(Java DataBase Connection)程序的创建步骤：</h1><h2 id="1-加载JDBC驱动程序"><a href="#1-加载JDBC驱动程序" class="headerlink" title="1.加载JDBC驱动程序"></a>1.加载JDBC驱动程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(com.mysql.jdbc.Driver)</span><br></pre></td></tr></table></figure><h2 id="2-提供JDBC连接的URL"><a href="#2-提供JDBC连接的URL" class="headerlink" title="2.提供JDBC连接的URL"></a>2.提供JDBC连接的URL</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String url=<span class="string">"jdbc:mysql://localhost:3306/db_shop"</span>;</span><br><span class="line">String username=<span class="string">"root"</span>;</span><br><span class="line">String password=<span class="string">"root"</span>;</span><br></pre></td></tr></table></figure><h2 id="3-创建数据库连接"><a href="#3-创建数据库连接" class="headerlink" title="3.创建数据库连接"></a>3.创建数据库连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connedtion conn=DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h2 id="4-创建一个Statement"><a href="#4-创建一个Statement" class="headerlink" title="4.创建一个Statement"></a>4.创建一个Statement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt=conn.createStatement();</span><br></pre></td></tr></table></figure><h2 id="5-执行SQL语句"><a href="#5-执行SQL语句" class="headerlink" title="5.执行SQL语句"></a>5.执行SQL语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">"select * from user"</span>;</span><br><span class="line">ResultSet rs=stmt.executeQuery(sql);</span><br></pre></td></tr></table></figure><h2 id="6-处理结果"><a href="#6-处理结果" class="headerlink" title="6.处理结果"></a>6.处理结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id=rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">    String name=rs.getString(<span class="string">"username"</span>);</span><br><span class="line">    String psw=rs.getString(<span class="string">"password"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ClassNotFoundException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7-关闭JDBC对象"><a href="#7-关闭JDBC对象" class="headerlink" title="7.关闭JDBC对象"></a>7.关闭JDBC对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    rs.close();</span><br><span class="line">    rs=<span class="keyword">null</span>;</span><br><span class="line">    stmt.close();</span><br><span class="line">    stmt=<span class="keyword">null</span>;</span><br><span class="line">    conn.close();</span><br><span class="line">    conn=<span class="keyword">null</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整的程序"><a href="#完整的程序" class="headerlink" title="完整的程序"></a>完整的程序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.mysql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCExample01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    String url=<span class="string">"jdbc:mysql://localhost:3306/db_shop"</span>;</span><br><span class="line">    String username=<span class="string">"root"</span>;</span><br><span class="line">    String password=<span class="string">"root"</span>;</span><br><span class="line">    Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">    Statement stmt=conn.createStatement();</span><br><span class="line">    String sql=<span class="string">"select * from users"</span>;</span><br><span class="line">    ResultSet rs=stmt.executeQuery(sql);</span><br><span class="line">    System.out.println(rs.getString(<span class="string">"id"</span>));</span><br><span class="line">    System.out.println(rs.getString(<span class="string">"username"</span>));</span><br><span class="line">    System.out.println(rs.getString(<span class="string">"password"</span>));</span><br><span class="line">    rs.close();</span><br><span class="line">    rs=<span class="keyword">null</span>;</span><br><span class="line">    stmt.close();</span><br><span class="line">    stmt=<span class="keyword">null</span>;</span><br><span class="line">    conn.close();</span><br><span class="line">    conn=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用prepareStatement类"><a href="#使用prepareStatement类" class="headerlink" title="使用prepareStatement类"></a>使用prepareStatement类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(String[] args)</span> throw SQLException</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        String url=<span class="string">"jdbc:mysql://localhost:3306/db_shop"</span>;</span><br><span class="line">        String username=<span class="string">"root"</span>;</span><br><span class="line">        String password=<span class="string">"root"</span>;</span><br><span class="line">        conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">        String sql=<span class="string">"INSERT INTO user(name,password,email)"</span>+<span class="string">"VALUE(?,?,?)"</span>;</span><br><span class="line">        preStmt=conn.PrepareStatement(sql);</span><br><span class="line">        preStmt=setString(<span class="number">1</span>,<span class="string">"zl"</span>);</span><br><span class="line">        preStmt=setString(<span class="number">2</span>,<span class="string">"12345"</span>);</span><br><span class="line">        preStmt=setString(<span class="number">3</span>,<span class="string">"zl@foxmain.com"</span>);</span><br><span class="line">        preStmt.executeUpdate();</span><br><span class="line">        preStmt.close();</span><br><span class="line">        preStmt=<span class="keyword">null</span>;</span><br><span class="line">        conn.close();</span><br><span class="line">        conn=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDBC-Java-DataBase-Connection-程序的创建步骤：&quot;&gt;&lt;a href=&quot;#JDBC-Java-DataBase-Connection-程序的创建步骤：&quot; class=&quot;headerlink&quot; title=&quot;JDBC(Java DataBa
      
    
    </summary>
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaweb" scheme="http://Altharsbuzhihuo.com/tags/javaweb/"/>
    
      <category term="JDBC" scheme="http://Altharsbuzhihuo.com/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Jsp</title>
    <link href="http://Altharsbuzhihuo.com/2018/07/29/Jsp/"/>
    <id>http://Altharsbuzhihuo.com/2018/07/29/Jsp/</id>
    <published>2018-07-29T12:46:20.000Z</published>
    <updated>2018-07-29T12:56:18.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jsp"><a href="#Jsp" class="headerlink" title="Jsp"></a>Jsp</h1><p>Jsp只是servlet的一个变种，为了方便书写html内容才出现。servlet是根本，所有jsp能做的，servlet全能做。</p><h1 id="Jsp与Js的区别"><a href="#Jsp与Js的区别" class="headerlink" title="Jsp与Js的区别"></a>Jsp与Js的区别</h1><p>JS是在客户端执行的，需要浏览器支持Javascript。JSP是在服务器端执行的，需要服务器上部署支持Servlet的服务器程序。JS代码是能够直接从服务器上download得到，对外是可见的，jsp(和翻译后的servlet)代码是对外不可见的。<br><strong>JS与JavaScript相比：</strong>虽然JavaScript可以在客户端动态生成HTML，但是很难与服务器交互，因此不能提供复杂的服务，比如访问数据库和图像处理等等。JSP在HTML中用&lt;%%&gt;里面实现。JS在html中用<script></script>实现。</p><h1 id="Jsp的生命周期"><a href="#Jsp的生命周期" class="headerlink" title="Jsp的生命周期"></a>Jsp的生命周期</h1><p>JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。</p><p>以下是JSP生命周期中所走过的几个阶段：</p><ul><li>编译阶段：<br>servlet容器编译servlet源文件，生成servlet类</li><li>初始化阶段：<br>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法</li><li>执行阶段：<br>调用与JSP对应的servlet实例的服务方法</li><li>执行阶段：<br>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</li></ul><h1 id="Jsp指令"><a href="#Jsp指令" class="headerlink" title="Jsp指令"></a>Jsp指令</h1><pre><code>#定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等&lt;%@page...%&gt;#包含其他文件&lt;%@include...%&gt;#引入标签库的定义，可以是自定义标签&lt;%@taglib...%&gt;</code></pre><h1 id="Jsp四个作用域-page-lt-request-lt-session-lt-application"><a href="#Jsp四个作用域-page-lt-request-lt-session-lt-application" class="headerlink" title="Jsp四个作用域(page&lt; request &lt; session &lt; application)"></a>Jsp四个作用域(page&lt; request &lt; session &lt; application)</h1><p>所谓作用域，规定的是变量的有效期限。</p><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><p>有效范围只在当前jsp页面。</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>有效范围是当前请求周期。</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>有效范围是当前会话。</p><p>所谓当前会话，就是指从用户打开浏览器开始，到用户关闭浏览器这中间的过程。也就是说，只要用户不关闭浏览器，服务器就有办法知道这些请求是一个人发起的，整个过程被称为一个会话(session)，而放入会话里的所有变量，就可以在当前所有请求中使用。</p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>有效范围是整个应用。</p><p>整个应用是指从应用启动，到应用结束。一个服务器可能部署多个应用，当然你关闭了服务器，就会把上面所有的应用都关闭了。</p><p>与上述三个不同的是，application里的变量可以被所有用户共用。如果用户甲的操作修改了application中的变量，用户乙访问时得到的是修改后的值。这在其他scope中都是不会发生的，page, request,session都是完全隔离的，无论如何修改都不会影响其他人的数据。</p><h1 id="Jsp九个内置对象"><a href="#Jsp九个内置对象" class="headerlink" title="Jsp九个内置对象"></a>Jsp九个内置对象</h1><table><thead><tr><th>内置对象</th><th style="text-align:center">类型</th><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>request</td><td style="text-align:center">请求对象</td><td>Request</td><td>HttpServletRequest类的实例</td></tr><tr><td>response</td><td style="text-align:center">响应对象</td><td>Page</td><td>HttpServletResponse类的实例</td></tr><tr><td>pageContext</td><td style="text-align:center">页面上下文对象</td><td>Page</td><td>PageContext类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td>session</td><td style="text-align:center">会话对象</td><td>Session</td><td>HttpSession类的实例</td></tr><tr><td>application</td><td style="text-align:center">应用程序对象</td><td>Application</td><td>ServletContext类的实例，与应用上下文有关</td></tr><tr><td>out</td><td style="text-align:center">输出对象</td><td>Page</td><td>PrintWriter类的实例，用于把结果输出至网页上</td></tr><tr><td>config</td><td style="text-align:center">配置对象</td><td>Page</td><td>ServletConfig类的实例</td></tr><tr><td>page</td><td style="text-align:center">页面对象</td><td>Page</td><td>类似于Java类中的this关键字</td></tr><tr><td>exception</td><td style="text-align:center">例外对象</td><td>Page</td><td>Exception类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><h1 id="Jsp的七个动作指令"><a href="#Jsp的七个动作指令" class="headerlink" title="Jsp的七个动作指令"></a>Jsp的七个动作指令</h1><h2 id="1）jsp-include-指令"><a href="#1）jsp-include-指令" class="headerlink" title="1）jsp:include 指令"></a>1）jsp:include 指令</h2><p>用于请求处理阶段包含一个servlet或jsp页面的响应。和编译指令中的include不同，include只能包含静态页面，而jsp:include指令可以包含静态和动态页面。</p><pre><code>#静态页面&lt;jsp:include page=&quot;文件路径&quot;/&gt;#动态页面&lt;jsp:include page=&quot;文件路径&quot;&gt;...&lt;/jsp:include&gt;</code></pre><h2 id="2-jsp-forword指令"><a href="#2-jsp-forword指令" class="headerlink" title="2)jsp:forword指令"></a>2)jsp:forword指令</h2><p>用于执行页面转向，将请求的处理转发到下一页面。</p><pre><code>#跳转向静态页面&lt;jsp:forword page=&quot;文件路径&quot;/&gt;#跳转向动态页面&lt;jsp:forword page=&quot;文件路径&quot;&gt; ...&lt;/jsp:forword&gt;</code></pre><h2 id="3-jsp-useBean指令"><a href="#3-jsp-useBean指令" class="headerlink" title="3)jsp:useBean指令"></a>3)jsp:useBean指令</h2><p>用于在jsp页面内创建一个JavaBean实例。</p><pre><code>&lt;jsp:userBean id=&quot;JavaBean的名字&quot; scope=&quot;有效范围&quot; class=&quot;包名.类名&quot;&gt;&lt;jsp:userBean&gt;       </code></pre><h2 id="4-jsp-setProparty指令"><a href="#4-jsp-setProparty指令" class="headerlink" title="4)jsp:setProparty指令"></a>4)jsp:setProparty指令</h2><p>用来设置Bean对象的属性</p><pre><code>&lt;jsp:setProparty name=&quot;JavaBean的名称&quot; proparty=&quot;属性名&quot;/&gt;&lt;jsp:setProparty name=&quot;JavaBean的名称&quot; proparty=&quot;属性名&quot; param=&quot;参数名&quot;/&gt;&lt;jsp:setProparty name=&quot;JavaBean的名称&quot; proparty=&quot;属性名&quot; value=&quot;参数名&quot;/&gt;</code></pre><h2 id="5-jsp-getProparty指令"><a href="#5-jsp-getProparty指令" class="headerlink" title="5)jsp:getProparty指令"></a>5)jsp:getProparty指令</h2><p>用来读取Bean对象的属性，并将其转换为一个字符串显示在页面上。</p><pre><code>&lt;jsp:getProparty name=&quot;Bean的名称&quot; proparty=&quot;属性名称&quot;&gt;</code></pre><h2 id="6-jsp-plugin指令（不常用）"><a href="#6-jsp-plugin指令（不常用）" class="headerlink" title="6)jsp:plugin指令（不常用）"></a>6)jsp:plugin指令（不常用）</h2><p>用于下载服务器端的JavaBean或Applet到客户端执行。</p><h2 id="7）jsp-param指令（不常用）"><a href="#7）jsp-param指令（不常用）" class="headerlink" title="7）jsp:param指令（不常用）"></a>7）jsp:param指令（不常用）</h2><p>用于设置参数，不能单独使用，主要用在jsp:inclde jsp:forword jsp:plugin指令中。</p><h2 id="include指令与include动作"><a href="#include指令与include动作" class="headerlink" title="include指令与include动作"></a>include指令与include动作</h2><h3 id="1）include指令："><a href="#1）include指令：" class="headerlink" title="1）include指令："></a>1）include指令：</h3><p>include可以在JSP页面转换成Servlet之前，将JSP代码插入其中。它的主要优点是功能强大，所包含的代码可以含有总体上影响主页面的JSP构造，比如属性、方法的定义和文档类型的设定。它的缺点是难于维护只要被包含的页面发生更改，就得更改主页面，这是因为主页面不会自动地查看被包含的页面是否发生更改。<br>include指令的语法格式如下：</p><pre><code>&lt;%@include file=&quot;Relative Url&quot;%&gt;</code></pre><h3 id="2）include动作："><a href="#2）include动作：" class="headerlink" title="2）include动作："></a>2）include动作：</h3><p>jsp:include动作是在主页面被请求时，将次级页面的输出包含进来。尽管被包含的页面的输出中不能含有JSP，但这些页面可以是其他资源所产生的结果。服务器按照正常的方式对指向被包含资源的URL进行解释，因而这个URL可以是Servlet或JSP页面。服务器以通常的方式运行被包含的页面，将产生的输出放到主页面中，这种方式与RequestDispatcher类的include方法一致。它的优点是在被包含的页面发生更改时，无须对主页面做出修改。它的缺点是所包含的是次级页面的输出，而非次级页面的实际代码，所以在被包含的页面中不能使用任何有可能在整体上影响主页面的JSP构造。<br>jsp:include动作的完整语法如下：</p><pre><code>&lt;jsp:include page=&quot;Relative path to resource&quot; flush=&quot;true&quot;&gt;  </code></pre><h3 id="两者区别："><a href="#两者区别：" class="headerlink" title="两者区别："></a>两者区别：</h3><p>jsp:include动作和include指令之间的根本性的不同在于它们被调用的时间。jsp:include动作在请求期间被激活，而include指令在页面转换期间被激活。<br> 两者之间的差异决定着它们在使用上的区别。使用include指令的页面要比使用jsp:include动作的页面难于维护。使用JSP指令，如果包含的JSP页面发生变化，那么用到这个页面的所有页面都需要手动更新。在JSP服务器的相关规范中并没要求能够检测出包含的文件什么时候发生改变，实际上大多数服务器页都有去实现这种机制。这样就会导致十分严重的维护问题，需要记住所有包含某一个页面的其他页面，或者重新编译所有的页面，以使更改能够生效。在这点上，jsp:include就体现出了十分巨大的优势，它在每次请求时重新把资源包含进来。在实现文件包含上，应该尽可能地使用jsp:include动作。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jsp&quot;&gt;&lt;a href=&quot;#Jsp&quot; class=&quot;headerlink&quot; title=&quot;Jsp&quot;&gt;&lt;/a&gt;Jsp&lt;/h1&gt;&lt;p&gt;Jsp只是servlet的一个变种，为了方便书写html内容才出现。servlet是根本，所有jsp能做的，servlet全能做。&lt;
      
    
    </summary>
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaweb" scheme="http://Altharsbuzhihuo.com/tags/javaweb/"/>
    
      <category term="Jsp" scheme="http://Altharsbuzhihuo.com/tags/Jsp/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="http://Altharsbuzhihuo.com/2018/07/19/Servlet/"/>
    <id>http://Altharsbuzhihuo.com/2018/07/19/Servlet/</id>
    <published>2018-07-19T01:56:44.000Z</published>
    <updated>2018-08-19T12:00:14.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Servlet？"><a href="#什么是Servlet？" class="headerlink" title="什么是Servlet？"></a>什么是Servlet？</h1><p>Servlet是一个Java程序，在服务器上运行以处理客户端请求并做出响应的程序。<br>Servlet主要用于处 理客户端传来的HTTP请求，并返回一个响应，它能够处理的请求有 doGet()和doPost()等方法。<br>Servlet由Servlet容器提供，所谓的Servlet容器是指提供了Servlet 功能的 服务器（本书中指Tomcat），Servlet容器将Servlet动态的加载到服务器 上。与HTTP 协议相关的Servlet使用HTTP请求和HTTP响应与客户端进行交互。因此，Servlet容器支持所有HTTP协议的请求和响应。</p><h1 id="servlet的创建方式（三种）"><a href="#servlet的创建方式（三种）" class="headerlink" title="servlet的创建方式（三种）"></a>servlet的创建方式（三种）</h1><p>1.继承HttpServlet类实现一个自定义servlet[有http特性]<br>2.通过实现Servlet接口实现一个自定义servlet[什么特性都没有，所有实现要自己写]<br>3.继承GenericServlet抽象类实现一个自定义servlet[通过继承该抽象类实现类似于https特性的请求和响应]</p><h1 id="Servlet的配置方式（两种）"><a href="#Servlet的配置方式（两种）" class="headerlink" title="Servlet的配置方式（两种）"></a>Servlet的配置方式（两种）</h1><p>1.基于XML的配置，在web.xml中通过servlet节点配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;secondServlet&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cx</span>.<span class="title">servlet</span>.<span class="title">SecondServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;-1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">secondServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hstt</span>.<span class="title">php</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.基于注解的配置（servlet3.0版本以上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"SimpleServlet"</span>,urlPatterns = &#123;<span class="string">"/simple.jsp"</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="servlet容器：运行servlet、JSP、Filter等软件环境"><a href="#servlet容器：运行servlet、JSP、Filter等软件环境" class="headerlink" title="servlet容器：运行servlet、JSP、Filter等软件环境"></a>servlet容器：运行servlet、JSP、Filter等软件环境</h1><p>1.可以来创建servlet，并调用servlet的相关生命周期方法。<br>2.JSP，Filter，Listener，Tag…</p><h1 id="servlet生命周期方法"><a href="#servlet生命周期方法" class="headerlink" title="servlet生命周期方法"></a>servlet生命周期方法</h1><p>1.构造器：只有第一次请求servlet时，创建servlet的实例，调用构造器（只被调用一次）。这说明servlet是单例的。<br>2.init方法：只被调用一次，在创建好实例后立即被调用，用于初始化当前servlet。<br>3.service：处理具体的请求返回响应，在具体子类中转交给了doGet方法或doPost方法。<br>4.destory：只被调用一次，在当前servlet所在的web应用被卸载前调用，用于释放当前servlet所占用资源。</p><h1 id="load-on-startup参数"><a href="#load-on-startup参数" class="headerlink" title="load-on-startup参数"></a>load-on-startup参数</h1><p>1.配置在web.xml的servlet节点中或者注解配置。<br><strong>servlet节点</strong></p><pre><code>&lt;servlet&gt;&lt;servlet-name&gt;secondServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;cx.servlet.SecondServlet&lt;/servlet-class&gt;&lt;load-on-startup&gt;-1&lt;/load-on-startup&gt;&lt;/servlet&gt;</code></pre><p><strong>注解</strong></p><pre><code>@WebServlet(    loadOnStartup = 1,    urlPatterns = {&quot;/si.do&quot;,&quot;/servletTest.jsp&quot;})</code></pre><p>一个servlet类可用配置多个url映射，而且注解的配置和xml配置可用配置到同一个servlet类上。</p><p>2.load-on-startup：可以指定servlet被创建的时机。若为负数，则在第一次请求时被创建。若为0或负数，则在当前web应用被servlet容器加载时创建实例，且数据越小越早被创建。</p><h1 id="关于servlet-mapping"><a href="#关于servlet-mapping" class="headerlink" title="关于servlet-mapping"></a>关于servlet-mapping</h1><p>一个servlet可以对应多个servlet-mapping<br> <strong>虚拟路径：</strong>“<em>.扩展名”，”/</em>“  合法<br> <strong>注意：</strong>/*.action不合法</p><h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h1><p>封装了servlet的配置信息，并且可以获取servletContext对象<br>1.配置servlet初始化参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;user&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;root&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;password&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;123&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br></pre></td></tr></table></figure><p><strong>该节点必须在load-on-startup节点之前</strong></p><p>2.获取初始化参数：<br>配置初始化参数的两种方式：<br>web.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;driver&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>&#123;</span><br><span class="line">    urlPatterns=&#123;<span class="string">"/hello.do"</span>&#125;,</span><br><span class="line">    initParams=&#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"code"</span>,value = <span class="string">"UTF-8"</span>) &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>getInitParameter(String name):获取指定参数名的初始化参数<br>getInitParameterNames():获取参数名组成的Enumeration对象</p></blockquote><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><p>通过ServletContext接口读取 <strong>上下文参数</strong>（用于多个servlet间共享配置和数据）</p><p>1.可以由ServletConfig获取servletContext对象  </p><pre><code>ServletContext servletContext=servletConfig.getServletContext();</code></pre><p>2.ServletContext是当前web应用的一个大管家，可以获取到当前web应用的各方面信息。</p><ul><li>获取当前web应用的初始化参数</li></ul><h2 id="设置上下文参数"><a href="#设置上下文参数" class="headerlink" title="设置上下文参数"></a>设置上下文参数</h2><p>（context-param可以为所有Servlet所获取，而Servlet的初始化参数init-param只给那个Servlet可以获取）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;driver&lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;com.mysql.jdbc.Driver&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure><p>##获取当前web应用的某一个文件的路径<br>得到的返回结果为在服务器上的绝对路径，而不是部署前的路径</p><blockquote><p>getRealPath(String path)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">String contextInit= servletContext.getInitParameter(<span class="string">"coding"</span>);</span><br><span class="line">System.out.println(<span class="string">"读取到上下文的配置参数值："</span>+contextInit);</span><br><span class="line">servletContext.setAttribute(<span class="string">"gkey"</span>,<span class="string">"全局共享的数据"</span>);</span><br><span class="line">System.out.println(<span class="string">"上下文的属性数据："</span>+servletContext.getAttribute(<span class="string">"gkey"</span>));</span><br><span class="line">String realPath=servletContext.getRealPath(<span class="string">"WEB-INF/classes/cx.properties"</span>);</span><br><span class="line">FileInputStream in=<span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">Properties ppt=<span class="keyword">new</span> Properties();</span><br><span class="line">ppt.load(in);</span><br><span class="line">System.out.println(ppt.getProperty(<span class="string">"Company"</span>));</span><br><span class="line">System.out.println(ppt.getProperty(<span class="string">"Address"</span>));</span><br></pre></td></tr></table></figure><p>##获取当前web应用的名称</p><blockquote><p>getContextPath()</p></blockquote><p>##获取当前web应用的某一个文件对应的输入流</p><blockquote><p>getResourceAsStream(String path)  </p></blockquote><p> path–&gt; ‘/‘相当于当前web的根目录</p><h1 id="Get请求和Post请求"><a href="#Get请求和Post请求" class="headerlink" title="Get请求和Post请求"></a>Get请求和Post请求</h1><p>1.Get请求传参在url，Get方式传送的数据量一般限制在1KB以下。<br>2.Post请求方式主要用于向web服务器端程序提交form表单中的数据，form中metho置为post。Post方式将各个表单字段及其数据作为HTTP消息实体内容发送给web服务器，传送数据量比get大得多。</p><h1 id="如何在Servlet中获得请求信息？"><a href="#如何在Servlet中获得请求信息？" class="headerlink" title="如何在Servlet中获得请求信息？"></a>如何在Servlet中获得请求信息？</h1><p>1.servlet的service()方法,每次请求都会调用service方法。</p><p>ServletRequest：封装了请求信息，可以从中获取任何的请求信息。<br>ServletResponse：封装了响应信息，如果想给用户什么响应，具体可以使用该接口方法实现。<br>这两个接口的实现类都是服务器予以实现的。</p><h2 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h2><blockquote><p>String user=request.getParameter(“user”)</p></blockquote><h1 id="获得当前servlet的刷新次数"><a href="#获得当前servlet的刷新次数" class="headerlink" title="获得当前servlet的刷新次数"></a>获得当前servlet的刷新次数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineNumberServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> ServletException</span>&#123;</span><br><span class="line">        <span class="comment">//设置初始化参数</span></span><br><span class="line">        ServletContext servletContext=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">"num"</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"当前servlet的访问次数："</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//每刷新一次就将访问数量+1</span></span><br><span class="line">        ServletContext servletContext=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">        Integer val=(Integer) servletContext.getAttribute(<span class="string">"num"</span>);</span><br><span class="line">        val++;</span><br><span class="line">        servletContext.setAttribute(<span class="string">"num"</span>,val);</span><br><span class="line">        System.out.println(<span class="string">"当前本servlet访问次数："</span>+val+<span class="string">""</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"GBK"</span>);</span><br><span class="line">        response.getWriter().println(<span class="string">"当前本servlet访问次数："</span>+val+<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Servlet？&quot;&gt;&lt;a href=&quot;#什么是Servlet？&quot; class=&quot;headerlink&quot; title=&quot;什么是Servlet？&quot;&gt;&lt;/a&gt;什么是Servlet？&lt;/h1&gt;&lt;p&gt;Servlet是一个Java程序，在服务器上运行以处理客户端请求并做
      
    
    </summary>
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://Altharsbuzhihuo.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="javaweb" scheme="http://Altharsbuzhihuo.com/tags/javaweb/"/>
    
      <category term="Servlet" scheme="http://Altharsbuzhihuo.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客，Hexo+Github</title>
    <link href="http://Altharsbuzhihuo.com/2018/07/16/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo+Github/"/>
    <id>http://Altharsbuzhihuo.com/2018/07/16/搭建个人博客，Hexo+Github/</id>
    <published>2018-07-16T01:43:57.000Z</published>
    <updated>2018-07-16T16:53:27.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="为什么要用Hexo-Github自建博客？"><a href="#为什么要用Hexo-Github自建博客？" class="headerlink" title="为什么要用Hexo+Github自建博客？"></a>为什么要用Hexo+Github自建博客？</h2><p>自己建的博客有完全的自主权，你可以自己做各种程序上的修改，完整的备份等等～<br>微软这么大的博客系统都可以一夜之间关掉，你还敢用吗？<br><del>当然是因为Hexo简单，开源，不要钱，可以为所欲为啊。</del></p><h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a><br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p><strong>1.配置Github</strong><br>首先注册/登录Github，看不懂英语，用谷歌浏览器可以翻译网页。</p><blockquote><p><a href="https://github.com/" target="_blank" rel="noopener">github网址</a><br><em>记住自己的username和注册邮箱</em></p></blockquote><p>选择Create a new repository<a href="https://github.com/new" target="_blank" rel="noopener">新建一个仓库</a></p><p>Repository name（填自己的名字） </p><p>name.github.io(name与你的注册用户名一致,这个就是你博客的域名了)</p><blockquote><p>eg:我的域名是github.com/Altharsbuzhihuo，就填入Altharsbuzhihuo.github.io。成功后出现下面的画面:</p></blockquote><p><img src="/img/20180716161616.png" alt="gitbash"></p><p><strong>2.安装 Node.js</strong> </p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js安装地址</a></p></blockquote><p><strong>3.安装 Git</strong> </p><blockquote><p><a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">Git安装地址</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a></p></blockquote><p><strong>4.安装完成后,鼠标右键选择–&gt;Git Bash here</strong></p><p>  因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。<br>  <img src="/img/2018071600.png" alt="gitbash"></p><p><strong>5.安装Hexo</strong><br>使用cmd命令窗口输入如下命令：</p><blockquote><p>npm install -g hexo-cli</p></blockquote><p>等待下载，成功后输入 npm -v 会显示版本<br><img src="/img/20180717003625.png" alt=""></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>在电脑F盘或者随意什么目录下新建文件test，进入test按住shift点击鼠标右键打开命令行窗口，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></p><p>等待下载成功提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure></p><p>因为初始化hexo之后source目录下自带一篇hello world文章, 所以直接执行下方命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#发布草稿，生成预览</span><br><span class="line">$ hexo g</span><br><span class="line">#启动本地服务器</span><br><span class="line">$ hexo s</span><br><span class="line">#提示信息</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>访问 <a href="http://localhost:4000/，" target="_blank" rel="noopener">http://localhost:4000/，</a> 可以看到网站的初步样子。</p><p><img src="http://i.imgur.com/wk2ybMK.jpg" alt=""></p><p>重新打开CMD，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>一直Enter，得到信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a></p><p>New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key</p><h1 id="设置博客"><a href="#设置博客" class="headerlink" title="设置博客"></a>设置博客</h1><p>在blog目录下，打开_config.yml文件，修改参数信息。</p><p><strong>每个参数后使用一个英文空格</strong></p><p><img src="/img/20180716173608.png" alt=""><br><img src="/img/20180716173742.png" alt=""></p><h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 测试文章</span><br><span class="line">$ hexo new &quot;test&quot;</span><br><span class="line">INFO  Created: E:\Git\workspace\test\blog\source\_posts\test.md</span><br></pre></td></tr></table></figure><p>根据文件路径找到该文章，使用markdown编辑语法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2018-07-17 00:20:54</span><br><span class="line">---</span><br><span class="line">这是一篇测试文章。</span><br></pre></td></tr></table></figure></p><p>保存，然后执行如下步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">F:\test\blog</span><br><span class="line">$ hexo clean</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line"></span><br><span class="line">F:\test\blog</span><br><span class="line">$ hexo g</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 1.48 s</span><br><span class="line">#省略</span><br><span class="line">INFO  29 files generated in 4.27 s</span><br><span class="line"></span><br><span class="line">F:\test\blog</span><br><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>这个时候，打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  ，发现刚才的文章已经成功了<br><img src="/img/20180717002954.png" alt=""></p><p>最后一步，部署发布，执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\test\blog</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>打开博客链接 <a href="https://Altharsbuzhihuo.github.io" target="_blank" rel="noopener">https://Altharsbuzhihuo.github.io</a>  就能看到发布了。</p><hr><p><strong>相关链接：</strong><a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">Hexo的next主题个性化教程</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;为什么要用Hexo-Github自建博客？&quot;&gt;&lt;a href=&quot;#为什么要用Hexo-Github自建博客？&quot; c
      
    
    </summary>
    
      <category term="搭建博客" scheme="http://Altharsbuzhihuo.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="搭建博客" scheme="http://Altharsbuzhihuo.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://Altharsbuzhihuo.com/tags/Hexo/"/>
    
      <category term="Github" scheme="http://Altharsbuzhihuo.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>二分歸并排序（Java實現）</title>
    <link href="http://Altharsbuzhihuo.com/2018/07/13/%E4%BA%8C%E5%88%86%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://Altharsbuzhihuo.com/2018/07/13/二分归并排序/</id>
    <published>2018-07-13T06:49:07.000Z</published>
    <updated>2018-07-13T06:57:55.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分歸并排序"><a href="#二分歸并排序" class="headerlink" title="二分歸并排序"></a>二分歸并排序</h1><p>  将数组从中切开分为一半，然后分区再继续划分子区间，直到分为只有两个元素比较或单个元素的无数个小区间。比较完各个分区两个元素大小之后，再将区间重新两两合并，合并过程中保持顺序由大到小排列。</p><blockquote><p>时间复杂度：O(log₂n)<br>空间复杂度：O(1)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low,mid,high,base;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arrays.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            low=<span class="number">0</span>;</span><br><span class="line">            high=i-<span class="number">1</span>;</span><br><span class="line">            base=arrays[i];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high) &#123;</span><br><span class="line">                </span><br><span class="line">                mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(arrays[mid]&gt;base) &#123;</span><br><span class="line">                    low=mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(arrays[mid]&lt;base) &#123;</span><br><span class="line">                    high=mid-<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=high+<span class="number">1</span>;j--) &#123;</span><br><span class="line">                arrays[j+<span class="number">1</span>]=arrays[j];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            arrays[high+<span class="number">1</span>]=base;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">        System.out.print(<span class="string">"二分归并排序结果如下："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrays.length;i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二分歸并排序&quot;&gt;&lt;a href=&quot;#二分歸并排序&quot; class=&quot;headerlink&quot; title=&quot;二分歸并排序&quot;&gt;&lt;/a&gt;二分歸并排序&lt;/h1&gt;&lt;p&gt;  将数组从中切开分为一半，然后分区再继续划分子区间，直到分为只有两个元素比较或单个元素的无数个小区间。比较
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="二分歸并排序" scheme="http://Altharsbuzhihuo.com/tags/%E4%BA%8C%E5%88%86%E6%AD%B8%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>堆排序（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/06/15/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://Altharsbuzhihuo.com/2018/06/15/堆排序/</id>
    <published>2018-06-15T00:46:37.000Z</published>
    <updated>2018-07-13T06:42:34.492Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><blockquote><p>时间复杂度：(nlogn)<br>空间复杂度：空间复杂度：O(1)</p></blockquote><p>來不及解釋了，看代碼：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重建堆（这里为最大堆）</span></span><br><span class="line"><span class="comment">     * 将数组处理为完全二叉树，使父结点&gt;左孩子&gt;右孩子</span></span><br><span class="line"><span class="comment">     * 自下而上调整二叉树结点位置，根节点为数组最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays 被排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 数组长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h 非叶结点下标i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateHeap</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> n,<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将非叶结点下标赋给i，定义叶子结点j</span></span><br><span class="line">        <span class="keyword">int</span> i=h;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置标志位flag为false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> temp=arrays[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//查找左右孩子最大结点并交换到父结点</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;n&amp;&amp;!flag)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果左孩子小于右孩子就j++指向右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(j&lt;n-<span class="number">1</span>&amp;&amp;arrays[j]&lt;arrays[j+<span class="number">1</span>])j++;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果父结点大于右孩子，则flag=true，本次循环结束</span></span><br><span class="line">            <span class="keyword">if</span>(temp&gt;arrays[j]) &#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//否则将右孩子放入父结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                arrays[i]=arrays[j];</span><br><span class="line">                i=j;</span><br><span class="line">                j=<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给子结点放入原父结点的值</span></span><br><span class="line">        arrays[i]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrays</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//n为数组下标最后一位</span></span><br><span class="line">        <span class="keyword">int</span> n=arrays.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        initHeap(arrays);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从小到大循环依次从堆中取出结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">            temp=arrays[<span class="number">0</span>];</span><br><span class="line">            arrays[<span class="number">0</span>]=arrays[i];</span><br><span class="line">            arrays[i]=temp;</span><br><span class="line">            </span><br><span class="line">            CreateHeap(arrays,i,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">        System.out.print(<span class="string">"堆排序结果如下："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;时间复杂度：(nlogn)&lt;br&gt;空间复杂度：空间复杂度：O(1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="堆排序" scheme="http://Altharsbuzhihuo.com/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/06/06/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://Altharsbuzhihuo.com/2018/06/06/快速排序/</id>
    <published>2018-06-06T11:40:35.000Z</published>
    <updated>2018-06-06T13:45:22.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>1.选择一个基准数x为arrays[0]，先从最右往左开始查找比x小的第一个数，找到后与arrays[i]交换位置。<br>2.再从左往右开始查找比x大的第一个数，找到后再与arrays[j]交换位置。<br>3.然后再重复1，2步骤，直到将数组中的数以x为基准分好区，此时i=j，将基准数x归位到arrays[i],左边的数都比x小，右边的数都比x大。<br>4.以x为界形成两个子区间，然后分别进行递归，也就是重复以上步骤就排好了。</p><blockquote><p>时间复杂度：平均为O(nlogn),最好为O(nlogn)，最坏为O(n2)<br>空间复杂度：O(log₂n)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arrays 被排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l 区间最左边的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r 区间最右边的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arrays,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给i赋值为区间最左下标，给j赋值为区间最右下标</span></span><br><span class="line"><span class="keyword">int</span> i=l,j=r,x=arrays[i];</span><br><span class="line"><span class="comment">//以基准数x为标准，对数组的数进行分区，直到i==j，循环结束</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;j) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从右往左循环查找比基准数小的数arrays[j]，并填入arrays[i]中</span></span><br><span class="line"><span class="keyword">while</span>(arrays[j]&gt;=x&amp;&amp;i&lt;j)j--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line"></span><br><span class="line">arrays[i++]=arrays[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从左往右循环查找比基准数大的数arrays[i]，并填入arrays[j]中</span></span><br><span class="line"><span class="keyword">while</span>(arrays[i]&lt;=x&amp;&amp;i&lt;j)i++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i&lt;j) &#123;</span><br><span class="line"></span><br><span class="line">arrays[j--]=arrays[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时i==j,将基准数x归位，使x左边的数都比x小，x右边的数都比x大</span></span><br><span class="line">arrays[i]=x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行递归，将左右分区继续排序</span></span><br><span class="line"><span class="keyword">if</span>(l&lt;i)quickSort(arrays,l,i-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;i)quickSort(arrays,i+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给quicSort传递参数，最左下标为0，最右下标为数组长度减1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 被排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"快速排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;p&gt;1.选择一个基准数x为arrays[0]，先从最右往左开始查找比x小的第一个数，找到后与arrays[i]交换位置。&lt;br&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="快速排序" scheme="http://Altharsbuzhihuo.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单排序之冒泡排序、选择排序、插入排序（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/06/01/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://Altharsbuzhihuo.com/2018/06/01/简单排序之冒泡排序、选择排序、插入排序/</id>
    <published>2018-06-01T12:28:23.000Z</published>
    <updated>2018-06-06T13:02:02.975Z</updated>
    
    <content type="html"><![CDATA[<p>今天写了一下数据结构里三种比较基础简单的排序算法。</p><h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h1><p>升序的话就是，两两依次比较，然后把大的数往后沉下去，第一次排序结束，最后一个最大的数优先排好，然后进行第二次比较，如果数组长度为n，那么一共要进行n次比较，每一次进行n-i-1趟比较。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=arrays.length;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arrays[j]&gt;arrays[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp=arrays[j+<span class="number">1</span>];</span><br><span class="line">arrays[j+<span class="number">1</span>]=arrays[j];</span><br><span class="line">arrays[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"冒泡排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(n²)<br>空间复杂度:O(1)</p></blockquote><h1 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h1><p>同样也是升序，就是从数组下标0开始，依次比较，第一次比较出最小的数，和arrays[0]交换位置，然后依次类推，找出剩余最小的数，交换位置，如果数组长度为n，那么一共要进行n次比较，每一次比较n-i趟。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=arrays.length;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-i;j++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arrays[i]&gt;arrays[i+j]) &#123;</span><br><span class="line"></span><br><span class="line">temp=arrays[i];</span><br><span class="line">arrays[i]=arrays[i+j];</span><br><span class="line">arrays[i+j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"选择排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(n²)<br>空间复杂度:O(1)</p></blockquote><h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h1><p>升序，假定一个数组从arrays[0]开始，然后往里面依次插入数，保证每次插入的数顺序都已经排好。每当要插入arrays[j]时，从已排好序的数组的下标最后一位开始扫描，如果arrays[j]之前还有比它大的数就交换位置。如果数组长度为n，一共要比较n次，一共比较0+1+2+…+n-1次。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arrays)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=arrays.length;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;<span class="number">0</span>;j--) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(arrays[j-<span class="number">1</span>]&gt;arrays[j]) &#123;</span><br><span class="line"></span><br><span class="line">temp=arrays[j-<span class="number">1</span>];</span><br><span class="line">arrays[j-<span class="number">1</span>]=arrays[j];</span><br><span class="line">arrays[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//依次打印排序后得到的结果</span></span><br><span class="line">System.out.print(<span class="string">"插入排序结果如下："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度:O(n²)<br>空间复杂度:O(1)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天写了一下数据结构里三种比较基础简单的排序算法。&lt;/p&gt;
&lt;h1 id=&quot;1-冒泡排序&quot;&gt;&lt;a href=&quot;#1-冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;1.冒泡排序&quot;&gt;&lt;/a&gt;1.冒泡排序&lt;/h1&gt;&lt;p&gt;升序的话就是，两两依次比较，然后把大的数往
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="冒泡排序" scheme="http://Altharsbuzhihuo.com/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
      <category term="选择排序" scheme="http://Altharsbuzhihuo.com/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
      <category term="插入排序" scheme="http://Altharsbuzhihuo.com/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>字符串模式匹配算法（Java实现）</title>
    <link href="http://Altharsbuzhihuo.com/2018/05/31/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
    <id>http://Altharsbuzhihuo.com/2018/05/31/字符串模式匹配算法/</id>
    <published>2018-05-31T06:58:45.000Z</published>
    <updated>2018-06-06T13:03:29.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-BF算法"><a href="#1-BF算法" class="headerlink" title="1.BF算法"></a>1.BF算法</h1><p>暴风(Brute Force)算法，又叫朴素算法,是一种比较好理解的简单字符串匹配算法。它是一种带回溯的模式匹配算法，将目标串依次逐字与模式串比较，再将得到的匹配结果输出。</p><p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchAll</span><span class="params">(String str1,String str2)</span></span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len1=str1.length();</span><br><span class="line"><span class="keyword">int</span> len2=str2.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层循环遍历目标字符串</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内层循环遍历模式串</span></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len2;j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐字比较是否一致，不一致则break结束内层循环</span></span><br><span class="line"><span class="keyword">if</span>(str1.charAt(i+j)!=str2.charAt(j))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印得到的匹配结果</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==len-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"子串出现的位置为："</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><strong>时间复杂度：</strong></p><blockquote><p>m=str1.length();<br>n=str2.length();</p></blockquote><blockquote><p>最好的情况：O(m)<br>最坏的情况：O(n(n-m+1)m)</p></blockquote><h1 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2.KMP算法"></a>2.KMP算法</h1><p>有点复杂，还没写，以后再写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-BF算法&quot;&gt;&lt;a href=&quot;#1-BF算法&quot; class=&quot;headerlink&quot; title=&quot;1.BF算法&quot;&gt;&lt;/a&gt;1.BF算法&lt;/h1&gt;&lt;p&gt;暴风(Brute Force)算法，又叫朴素算法,是一种比较好理解的简单字符串匹配算法。它是一种带回溯的模式
      
    
    </summary>
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://Altharsbuzhihuo.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Java" scheme="http://Altharsbuzhihuo.com/tags/Java/"/>
    
      <category term="模式匹配" scheme="http://Altharsbuzhihuo.com/tags/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
      <category term="BF算法" scheme="http://Altharsbuzhihuo.com/tags/BF%E7%AE%97%E6%B3%95/"/>
    
      <category term="KMP算法" scheme="http://Altharsbuzhihuo.com/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
